const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugActualitesPubliques() {
    console.log('üîç DIAGNOSTIC DES ACTUALIT√âS PUBLIQUES\n');

    try {
        // 1. V√©rifier toutes les actualit√©s
        const allActualites = await prisma.actualite.findMany({
            select: {
                id: true,
                titre: true,
                visible: true,
                public: true,
                datePublication: true
            },
            orderBy: { datePublication: 'desc' }
        });

        console.log('üìä TOUTES LES ACTUALIT√âS :');
        console.table(allActualites.map(a => ({
            ID: a.id,
            Titre: a.titre.substring(0, 30) + '...',
            Visible: a.visible ? '‚úÖ' : '‚ùå',
            Public: a.public ? '‚úÖ' : '‚ùå',
            Date: a.datePublication.toLocaleDateString('fr-FR')
        })));

        // 2. V√©rifier les actualit√©s visibles et publiques
        const publicActualites = await prisma.actualite.findMany({
            where: {
                visible: true,
                public: true
            },
            select: {
                id: true,
                titre: true,
                visible: true,
                public: true
            }
        });

        console.log(`\nüìã ACTUALIT√âS PUBLIQUES ET VISIBLES : ${publicActualites.length}`);
        if (publicActualites.length > 0) {
            console.table(publicActualites.map(a => ({
                ID: a.id,
                Titre: a.titre.substring(0, 30) + '...',
                Visible: a.visible,
                Public: a.public
            })));
        } else {
            console.log('‚ùå Aucune actualit√© publique et visible trouv√©e !');
        }

        // 3. V√©rifier les types de donn√©es
        console.log('\nüîç V√âRIFICATION DES TYPES :');
        if (allActualites.length > 0) {
            const sample = allActualites[0];
            console.log('Types des champs:', {
                visible: typeof sample.visible,
                public: typeof sample.public,
                visibleValue: sample.visible,
                publicValue: sample.public
            });
        }

        // 4. Corriger les actualit√©s avec public = null
        console.log('\nüîß CORRECTION DES ACTUALIT√âS :');

        const actualitesACorreger = await prisma.actualite.findMany({
            where: {
                public: null
            }
        });

        if (actualitesACorreger.length > 0) {
            console.log(`‚ö†Ô∏è ${actualitesACorreger.length} actualit√©(s) avec public = null trouv√©e(s)`);

            // Les corriger en les rendant publiques par d√©faut
            const correctionResult = await prisma.actualite.updateMany({
                where: {
                    public: null
                },
                data: {
                    public: true
                }
            });

            console.log(`‚úÖ ${correctionResult.count} actualit√©(s) corrig√©e(s) (rendues publiques)`);
        } else {
            console.log('‚úÖ Toutes les actualit√©s ont une valeur public d√©finie');
        }

        // 5. Test final
        console.log('\nüß™ TEST FINAL APR√àS CORRECTIONS :');
        const finalPublicActualites = await prisma.actualite.findMany({
            where: {
                visible: true,
                public: true
            },
            select: {
                id: true,
                titre: true
            }
        });

        console.log(`üìä ${finalPublicActualites.length} actualit√©(s) publique(s) et visible(s) maintenant disponible(s)`);

    } catch (error) {
        console.error('‚ùå Erreur:', error);
    } finally {
        await prisma.$disconnect();
    }
}

debugActualitesPubliques();