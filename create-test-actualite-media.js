const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestActualite() {
    try {
        console.log('üÜï Cr√©ation d\'une actualit√© de test...');

        // R√©cup√©rer un utilisateur DIRECTION ou ADMIN pour l'auteur
        const auteur = await prisma.user.findFirst({
            where: {
                role: { in: ['DIRECTION', 'ADMIN'] }
            }
        });

        if (!auteur) {
            console.log('‚ùå Aucun utilisateur DIRECTION ou ADMIN trouv√©');
            return;
        }

        const actualite = await prisma.actualite.create({
            data: {
                titre: 'Test Actualit√© avec M√©dia',
                contenu: 'Ceci est une actualit√© de test pour v√©rifier que le syst√®me fonctionne correctement. Les m√©dias peuvent maintenant √™tre attach√©s aux actualit√©s.',
                auteurId: auteur.id,
                important: true,
                visible: true,
                datePublication: new Date(),
                // On ne met pas de m√©dia pour l'instant car c'est juste un test
                mediaUrl: null,
                mediaType: null
            }
        });

        console.log('‚úÖ Actualit√© de test cr√©√©e:', actualite);

        // V√©rifier le compte total d'actualit√©s
        const count = await prisma.actualite.count();
        console.log('üìä Total actualit√©s dans la base:', count);

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'actualit√© de test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

createTestActualite();
