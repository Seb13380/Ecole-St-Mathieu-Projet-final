generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  adress    String
  phone     String
  email     String   @unique
  password  String
  role      String   // (PARENT, APEL, ENSEIGNANT, DIRECTION, ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  enfants   Student[]    @relation("ParentEnfants")
  messages  Message[]    @relation("UserMessages")
  actualites Actualite[] @relation("UserActualites")
  horaires  Horaire[]    @relation("EnseignantHoraires")
  notes     Note[]       @relation("EnseignantNotes")
}

model Student {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dateNaissance DateTime
  classeId  Int
  parentId  Int
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  parent    User     @relation("ParentEnfants", fields: [parentId], references: [id], onDelete: Cascade)
  classe    Classe   @relation("ClasseEleves", fields: [classeId], references: [id])
  notes     Note[]   @relation("EleveNotes")
  absences  Absence[] @relation("EleveAbsences")
}

model Classe {
  id        Int      @id @default(autoincrement())
  nom       String   @unique // CP, CE1, CE2, etc.
  niveau    String   // Elementaire, Maternelle
  enseignantId Int?
  anneeScolaire String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  eleves    Student[] @relation("ClasseEleves")
  horaires  Horaire[] @relation("ClasseHoraires")
  notes     Note[]    @relation("ClasseNotes")
  absences  Absence[] @relation("ClasseAbsences")
}

model Note {
  id        Int      @id @default(autoincrement())
  eleveId   Int
  classeId  Int
  enseignantId Int
  matiere   String
  note      Float
  coefficient Float   @default(1)
  commentaire String?
  dateEvaluation DateTime
  createdAt DateTime @default(now())
  
  // Relations
  eleve     Student  @relation("EleveNotes", fields: [eleveId], references: [id])
  classe    Classe   @relation("ClasseNotes", fields: [classeId], references: [id])
  enseignant User    @relation("EnseignantNotes", fields: [enseignantId], references: [id], onDelete: Cascade)
}

model Absence {
  id        Int      @id @default(autoincrement())
  eleveId   Int
  classeId  Int
  dateDebut DateTime
  dateFin   DateTime?
  motif     String
  justifiee Boolean  @default(false)
  commentaire String?
  createdAt DateTime @default(now())
  
  // Relations
  eleve     Student  @relation("EleveAbsences", fields: [eleveId], references: [id])
  classe    Classe   @relation("ClasseAbsences", fields: [classeId], references: [id])
}

model Horaire {
  id        Int      @id @default(autoincrement())
  classeId  Int
  enseignantId Int
  jourSemaine String  // Lundi, Mardi, etc.
  heureDebut String   // "08:30"
  heureFin  String    // "12:00"
  matiere   String
  createdAt DateTime @default(now())
  
  // Relations
  classe    Classe   @relation("ClasseHoraires", fields: [classeId], references: [id])
  enseignant User    @relation("EnseignantHoraires", fields: [enseignantId], references: [id], onDelete: Cascade)
}

model Actualite {
  id        Int      @id @default(autoincrement())
  titre     String
  contenu   String
  auteurId  Int
  datePublication DateTime @default(now())
  visible   Boolean  @default(true)
  important Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  auteur    User     @relation("UserActualites", fields: [auteurId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  expediteurId Int
  destinataireId Int?  // null pour message général
  sujet     String
  contenu   String
  lu        Boolean  @default(false)
  dateEnvoi DateTime @default(now())
  
  // Relations
  expediteur User    @relation("UserMessages", fields: [expediteurId], references: [id], onDelete: Cascade)
}

model Contact {
  id        Int      @id @default(autoincrement())
  nom       String
  email     String
  telephone String?
  sujet     String
  message   String
  traite    Boolean  @default(false)
  createdAt DateTime @default(now())
}

