generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  ENSEIGNANT
  ADMIN
  DIRECTION
  ASSISTANT_DIRECTION
  APEL
  GESTIONNAIRE_SITE
  SECRETAIRE_DIRECTION
  RESTAURATION
}

enum TicketBookletStatus {
  ACTIVE
  EXPIRED
  USED
}

enum MealReservationStatus {
  RESERVED
  CONSUMED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  VIREMENT
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id               Int       @id @default(autoincrement())
  firstName        String
  lastName         String
  adress           String
  phone            String
  email            String    @unique
  password         String
  role             UserRole  @default(PARENT)
  resetToken       String? // Token pour reset de mot de passe
  resetTokenExpiry DateTime? // Expiration du token de reset
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  enfants             Student[]            @relation("ParentEnfants")
  messages            Message[]            @relation("UserMessages")
  actualites          Actualite[]          @relation("UserActualites")
  travaux             Travaux[]            @relation("UserTravaux")
  horaires            Horaire[]            @relation("EnseignantHoraires")
  notes               Note[]               @relation("EnseignantNotes")
  menus               Menu[]               @relation("UserMenus")
  carouselImages      CarouselImage[]      @relation("UserCarouselImages")
  heroCarousel        HeroCarousel[]       @relation("UserHeroCarousel")
  TicketBooklet       TicketBooklet[]
  TicketPurchase      TicketPurchase[]
  inscriptionRequests InscriptionRequest[] @relation("InscriptionReviewer")
  reviewedRequests    InscriptionRequest[]
  galleryMedia        GalleryMedia[]       @relation("UserGalleryMedia")
}

model Student {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  dateNaissance DateTime
  classeId      Int
  parentId      Int
  photoUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  parent          User              @relation("ParentEnfants", fields: [parentId], references: [id], onDelete: Cascade)
  classe          Classe            @relation("ClasseEleves", fields: [classeId], references: [id])
  notes           Note[]            @relation("EleveNotes")
  absences        Absence[]         @relation("EleveAbsences")
  TicketBooklet   TicketBooklet[]
  MealReservation MealReservation[]
  TicketPurchase  TicketPurchase[]
}

model Classe {
  id            Int      @id @default(autoincrement())
  nom           String   @unique
  niveau        String
  enseignantId  Int?
  anneeScolaire String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  eleves   Student[] @relation("ClasseEleves")
  horaires Horaire[] @relation("ClasseHoraires")
  notes    Note[]    @relation("ClasseNotes")
  absences Absence[] @relation("ClasseAbsences")
}

model Note {
  id             Int      @id @default(autoincrement())
  eleveId        Int
  classeId       Int
  enseignantId   Int
  matiere        String
  note           Float
  coefficient    Float    @default(1)
  commentaire    String?
  dateEvaluation DateTime
  createdAt      DateTime @default(now())

  eleve      Student @relation("EleveNotes", fields: [eleveId], references: [id])
  classe     Classe  @relation("ClasseNotes", fields: [classeId], references: [id])
  enseignant User    @relation("EnseignantNotes", fields: [enseignantId], references: [id], onDelete: Cascade)
}

model Absence {
  id          Int       @id @default(autoincrement())
  eleveId     Int
  classeId    Int
  dateDebut   DateTime
  dateFin     DateTime?
  motif       String
  justifiee   Boolean   @default(false)
  commentaire String?
  createdAt   DateTime  @default(now())

  eleve  Student @relation("EleveAbsences", fields: [eleveId], references: [id])
  classe Classe  @relation("ClasseAbsences", fields: [classeId], references: [id])
}

model Horaire {
  id           Int      @id @default(autoincrement())
  classeId     Int
  enseignantId Int
  jourSemaine  String
  heureDebut   String
  heureFin     String
  matiere      String
  createdAt    DateTime @default(now())

  classe     Classe @relation("ClasseHoraires", fields: [classeId], references: [id])
  enseignant User   @relation("EnseignantHoraires", fields: [enseignantId], references: [id], onDelete: Cascade)
}

model Actualite {
  id              Int      @id @default(autoincrement())
  titre           String
  contenu         String
  auteurId        Int
  mediaUrl        String? // URL de l'image ou vidéo attachée
  mediaType       String? // "image" ou "video"
  datePublication DateTime @default(now())
  visible         Boolean  @default(true)
  important       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  auteur User @relation("UserActualites", fields: [auteurId], references: [id], onDelete: Cascade)
}

model Travaux {
  id          Int       @id @default(autoincrement())
  titre       String
  description String
  auteurId    Int
  dateDebut   DateTime?
  dateFin     DateTime?
  progression Int       @default(0) // Pourcentage de 0 à 100
  statut      String    @default("PLANIFIE") // PLANIFIE, EN_COURS, TERMINE, SUSPENDU
  visible     Boolean   @default(true)
  important   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  auteur User @relation("UserTravaux", fields: [auteurId], references: [id], onDelete: Cascade)
}

model Message {
  id             Int      @id @default(autoincrement())
  expediteurId   Int
  destinataireId Int?
  sujet          String
  contenu        String
  lu             Boolean  @default(false)
  dateEnvoi      DateTime @default(now())

  expediteur User @relation("UserMessages", fields: [expediteurId], references: [id], onDelete: Cascade)
}

model Contact {
  id        Int      @id @default(autoincrement())
  nom       String
  email     String
  telephone String?
  sujet     String
  message   String
  traite    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model InvitationCode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  role        String // SUPER_ADMIN, DIRECTEUR, ASSISTANT_DIRECTION, APEL, ENSEIGNANT, PARENT
  utilisePar  String? // Email de l'utilisateur qui a utilisé le code
  utilise     Boolean   @default(false)
  valideJusqu DateTime? // Date d'expiration
  createdBy   Int // ID de l'admin qui a créé le code
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
}

model ParentInvitation {
  id                 Int       @id @default(autoincrement())
  token              String    @unique // Token unique pour le lien
  parentEmail        String // Email du parent invité
  parentFirstName    String // Prénom du parent
  parentLastName     String // Nom du parent
  childFirstName     String // Prénom de l'enfant
  childLastName      String // Nom de l'enfant
  childDateNaissance DateTime? // Date de naissance de l'enfant
  classeId           Int? // Classe assignée (optionnel)
  emailSent          Boolean   @default(false) // Email envoyé
  used               Boolean   @default(false) // Invitation utilisée
  createdBy          Int // ID du directeur qui a créé l'invitation
  createdAt          DateTime  @default(now())
  usedAt             DateTime? // Date d'utilisation
  expiresAt          DateTime? // Date d'expiration
}

model Menu {
  id          Int       @id @default(autoincrement())
  semaine     String // "Semaine du 15 au 19 Janvier 2025"
  dateDebut   DateTime? // Date de début de la semaine
  dateFin     DateTime? // Date de fin de la semaine
  lundi       String? // Menu du lundi (ancienne version)
  mardi       String? // Menu du mardi (ancienne version)
  mercredi    String? // Menu du mercredi (ancienne version)
  jeudi       String? // Menu du jeudi (ancienne version)
  vendredi    String? // Menu du vendredi (ancienne version)
  pdfUrl      String? // URL du fichier PDF
  pdfFilename String? // Nom original du fichier PDF
  imageUrls   String? // URLs des images du PDF (JSON array)
  statut      String    @default("BROUILLON") // BROUILLON, PLANIFIE, ACTIF, ARCHIVE
  actif       Boolean   @default(false)
  auteurId    Int // Qui a créé/modifié le menu
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  auteur User @relation("UserMenus", fields: [auteurId], references: [id], onDelete: Cascade)
}

model TicketBooklet {
  id               Int                 @id @default(autoincrement())
  parentId         Int
  studentId        Int
  ticketsTotal     Int                 @default(10)
  ticketsRemaining Int                 @default(10)
  purchaseDate     DateTime            @default(now())
  price            Decimal             @default(35.00)
  status           TicketBookletStatus @default(ACTIVE)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  parent          User              @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student         Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  MealReservation MealReservation[]

  @@index([parentId])
  @@index([studentId])
  @@index([status])
}

model MealReservation {
  id              Int                   @id @default(autoincrement())
  studentId       Int
  mealDate        DateTime
  ticketBookletId Int
  createdAt       DateTime              @default(now())
  status          MealReservationStatus @default(RESERVED)
  updatedAt       DateTime              @updatedAt

  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  ticketBooklet TicketBooklet @relation(fields: [ticketBookletId], references: [id], onDelete: Cascade)

  @@unique([studentId, mealDate])
  @@index([mealDate])
  @@index([ticketBookletId])
  @@index([status])
}

model TicketPurchase {
  id              Int           @id @default(autoincrement())
  parentId        Int
  studentId       Int
  amount          Decimal
  ticketsQuantity Int           @default(10)
  paymentMethod   PaymentMethod @default(STRIPE)
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  parent  User    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([parentId])
  @@index([studentId])
  @@index([paymentStatus])
  @@index([createdAt])
}

model CarouselImage {
  id          Int      @id @default(autoincrement())
  filename    String // Nom du fichier (ex: "photo_2025_01_15.jpg")
  originalUrl String // URL de l'image originale
  titre       String? // Titre optionnel de l'image
  description String? // Description optionnelle
  ordre       Int      @default(0) // Ordre d'affichage dans le carousel
  active      Boolean  @default(true) // Image active ou non
  auteurId    Int // Qui a ajouté l'image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  auteur User @relation("UserCarouselImages", fields: [auteurId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([ordre])
}

model HeroCarousel {
  id          Int      @id @default(autoincrement())
  filename    String // Nom du fichier (ex: "hero_photo_2025_01_15.jpg")
  originalUrl String // URL de l'image originale
  titre       String? // Titre optionnel de l'image
  description String? // Description optionnelle
  ordre       Int      @default(0) // Ordre d'affichage dans le carousel principal
  active      Boolean  @default(true) // Image active ou non
  auteurId    Int // Qui a ajouté l'image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  auteur User @relation("UserHeroCarousel", fields: [auteurId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([ordre])
}

enum InscriptionStatus {
  PENDING
  APPROVED
  REJECTED
}

model InscriptionRequest {
  id              Int       @id @default(autoincrement())
  parentFirstName String
  parentLastName  String
  parentEmail     String    @unique
  parentPhone     String
  parentAddress   String
  password        String
  children        Json
  status          String    @default("PENDING")
  reviewedAt      DateTime?
  reviewedBy      Int?
  reviewComment   String?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  reviewer User? @relation("InscriptionReviewer", fields: [reviewedBy], references: [id])
  User     User? @relation(fields: [userId], references: [id])
  userId   Int?
}

model GalleryTheme {
  id          Int      @id @default(autoincrement())
  name        String   @unique // "rentrée", "spectacle", "sortie", etc.
  description String? // Description optionnelle du thème
  active      Boolean  @default(true)
  ordre       Int      @default(0) // Ordre d'affichage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  medias GalleryMedia[]

  @@index([active])
  @@index([ordre])
}

model GalleryMedia {
  id          Int              @id @default(autoincrement())
  filename    String // Nom du fichier
  originalUrl String // URL du fichier
  type        GalleryMediaType // IMAGE ou VIDEO
  titre       String? // Titre optionnel
  description String? // Description optionnelle
  themeId     Int // Thème associé
  auteurId    Int // Qui a ajouté le média
  active      Boolean          @default(true)
  ordre       Int              @default(0) // Ordre dans le thème
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  theme  GalleryTheme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  auteur User         @relation("UserGalleryMedia", fields: [auteurId], references: [id], onDelete: Cascade)

  @@index([themeId])
  @@index([auteurId])
  @@index([active])
  @@index([type])
}

enum GalleryMediaType {
  IMAGE
  VIDEO
}
