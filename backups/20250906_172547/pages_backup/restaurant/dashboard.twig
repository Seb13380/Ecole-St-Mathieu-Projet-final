{% extends "layouts/base.twig" %}

{% block title %}Tableau de bord restaurant -
	{{ currentDate }}
{% endblock %}

{% block main %}
	<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
		<div
			class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

			<!-- En-tête moderne -->
			<div class="mb-8">
				<div class="bg-white rounded-2xl shadow-sm border border-slate-200 p-8">
					<div class="text-center">
						<h1 class="text-4xl font-bold text-slate-800 mb-2">
							🍽️ Restaurant Scolaire
						</h1>
						<p class="text-xl text-slate-600">
							Bienvenue,
							<span class="font-semibold text-blue-600">{{ user.firstName }}
								{{ user.lastName }}</span>
						</p>
						<p class="text-sm text-slate-500 mt-1">Service de Restauration - École Saint-Mathieu</p>
						<div class="text-lg font-medium text-orange-600 mt-3">📅
							{{ currentDate }}</div>
						<div class="text-3xl mt-4">👩‍🍳</div>
						<p class="text-sm text-slate-500">Tableau de bord</p>
					</div>

					<!-- Actions rapides -->
					<div class="flex justify-center gap-4 mt-6">
						<a href="/restaurant/history" class="bg-orange-500 hover:bg-orange-600 text-white px-6 py-2 font-medium transition-colors">
							📚 Historique
						</a>
						<a href="/restaurant/stats" class="bg-orange-500 hover:bg-orange-600 text-white px-6 py-2 font-medium transition-colors">
							📊 Statistiques
						</a>
					</div>
				</div>
			</div>

			<!-- Statistiques du jour -->
			<div class="mb-8">
				<h2 class="text-2xl font-bold text-slate-800 mb-6 text-center flex items-center justify-center">
					<span class="mr-3">📊</span>
					Statistiques du Jour
				</h2>
				<div class="flex flex-wrap justify-center gap-6">
					<div class="bg-white shadow-md border-l-4 border-orange-500 p-6 hover:shadow-xl transition-all duration-300 text-center w-64 h-48">
						<div class="flex flex-col items-center h-full justify-center">
							<div class="bg-orange-100 p-3 mb-4">
								<svg class="h-8 w-8 text-orange-600" fill="none" viewbox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
								</svg>
							</div>
							<p class="text-sm font-medium text-slate-500">Total Réservations</p>
							<p class="text-3xl font-bold text-slate-800">{{ stats.totalToday }}</p>
							<p class="text-xs text-orange-600">📋 Aujourd'hui</p>
						</div>
					</div>

					<div class="bg-white shadow-md border-l-4 border-green-500 p-6 hover:shadow-xl transition-all duration-300 text-center w-64 h-48">
						<div class="flex flex-col items-center h-full justify-center">
							<div class="bg-green-100 p-3 mb-4">
								<svg class="h-8 w-8 text-green-600" fill="none" viewbox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
								</svg>
							</div>
							<p class="text-sm font-medium text-slate-500">Repas Servis</p>
							<p class="text-3xl font-bold text-slate-800">{{ stats.served }}</p>
							<p class="text-xs text-green-600">✅ Terminés</p>
						</div>
					</div>

					<div class="bg-white shadow-md border-l-4 border-blue-500 p-6 hover:shadow-xl transition-all duration-300 text-center w-64 h-48">
						<div class="flex flex-col items-center h-full justify-center">
							<div class="bg-blue-100 p-3 mb-4">
								<svg class="h-8 w-8 text-blue-600" fill="none" viewbox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
								</svg>
							</div>
							<p class="text-sm font-medium text-slate-500">En Attente</p>
							<p class="text-3xl font-bold text-slate-800">{{ stats.pending }}</p>
							<p class="text-xs text-blue-600">⏰ À servir</p>
						</div>
					</div>

					<div class="bg-white shadow-md border-l-4 border-red-500 p-6 hover:shadow-xl transition-all duration-300 text-center w-64 h-48">
						<div class="flex flex-col items-center h-full justify-center">
							<div class="bg-red-100 p-3 mb-4">
								<svg class="h-8 w-8 text-red-600" fill="none" viewbox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
								</svg>
							</div>
							<p class="text-sm font-medium text-slate-500">Absents</p>
							<p class="text-3xl font-bold text-slate-800">{{ stats.noShow }}</p>
							<p class="text-xs text-red-600">❌ Non venus</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Messages de succès/erreur -->
			<div id="messageContainer" class="mb-6 hidden">
				<div id="messageContent" class="px-4 py-3 rounded"></div>
			</div>

			<!-- Liste des réservations du jour -->
			<div class="bg-white rounded-lg shadow-lg overflow-hidden">
				<div class="px-6 py-4 bg-orange-600 text-white">
					<h2 class="text-xl font-semibold">🍽️ Réservations d'aujourd'hui</h2>
				</div>

				{% if todayReservations|length > 0 %}
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Élève
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Classe
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Statut
									</th>
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Actions
									</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								{% for reservation in todayReservations %}
									<tr id="reservation-{{ reservation.id }}" class="{% if reservation.status == 'CONSUMED' %}bg-green-50{% elseif reservation.status == 'NO_SHOW' %}bg-red-50{% endif %}">
										<td class="px-6 py-4 whitespace-nowrap">
											<div class="flex items-center">
												<div class="text-sm font-medium text-gray-900">
													{{ reservation.student.firstName }}
													{{ reservation.student.lastName }}
												</div>
											</div>
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											<div class="text-sm text-gray-900">{{ reservation.student.classe.nom }}</div>
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
																										                                            {% if reservation.status == 'RESERVED' %}bg-blue-100 text-blue-800
																										                                            {% elseif reservation.status == 'CONSUMED' %}bg-green-100 text-green-800
																										                                            {% elseif reservation.status == 'NO_SHOW' %}bg-red-100 text-red-800
																										                                            {% endif %}">
												{% if reservation.status == 'RESERVED' %}⏰ Réservé
													{% elseif reservation.status == 'CONSUMED' %}✅ Consommé
													{% elseif reservation.status == 'NO_SHOW' %}❌ Absent
												{% endif %}
											</span>
										</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
											{% if reservation.status == 'RESERVED' %}
												<button onclick="markAsConsumed({{ reservation.id }})" class="text-green-600 hover:text-green-900 mr-3">
													✅ Servir
												</button>
												<button onclick="markAsNoShow({{ reservation.id }})" class="text-red-600 hover:text-red-900">
													❌ Absent
												</button>
											{% else %}
												<span class="text-gray-400">
													{% if reservation.status == 'CONSUMED' %}Déjà servi
														{% else %}Marqué absent
													{% endif %}
												</span>
											{% endif %}
										</td>
									</tr>
								{% endfor %}
							</tbody>
						</table>
					</div>
				{% else %}
					<div class="p-8 text-center">
						<div class="text-6xl mb-4">🍽️</div>
						<h3 class="text-xl font-semibold text-gray-900 mb-2">Aucune réservation aujourd'hui</h3>
						<p class="text-gray-600">Il n'y a pas de repas réservés pour aujourd'hui.</p>
					</div>
				{% endif %}
			</div>

			<!-- Actions rapides -->
			<div class="mt-8 bg-white rounded-lg shadow-lg p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">🚀 Actions rapides</h3>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
					<button onclick="markAllAsConsumed()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
						✅ Marquer tous comme servis
					</button>
					<button onclick="refreshPage()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
						🔄 Actualiser
					</button>
					<a href="/restaurant/history" class="block text-center bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700">
						📚 Voir l'historique
					</a>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block scripts %}
	{{ parent() }}
	<script>
		// Fonction pour marquer un ticket comme consommé
function markAsConsumed(reservationId) {
updateReservationStatus(reservationId, 'consume', 'Ticket marqué comme consommé');
}

// Fonction pour marquer un ticket comme absent
function markAsNoShow(reservationId) {
updateReservationStatus(reservationId, 'no-show', 'Ticket marqué comme absent');
}

// Fonction générique pour mettre à jour le statut
function updateReservationStatus(reservationId, action, successMessage) {
fetch (`/restaurant/${action}`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{reservationId: reservationId}
)
}).then(response => response.json()).then(data => {
if (data.success) {
showMessage(successMessage, 'success');
// Mettre à jour visuellement la ligne
updateRowVisually(reservationId, action);
// Mettre à jour les statistiques
updateStats(action);
} else {
showMessage(data.message || 'Erreur lors de la mise à jour', 'error');
}
}).catch(error => {
console.error('Erreur:', error);
showMessage('Erreur de connexion', 'error');
});
}

// Mettre à jour visuellement la ligne
function updateRowVisually(reservationId, action) {
const row = document.getElementById (`reservation-${reservationId}`);
if (! row) 
return;



const statusCell = row.children[2];
const actionCell = row.children[3];

if (action === 'consume') {
row.className = 'bg-green-50';
statusCell.innerHTML = '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">✅ Consommé</span>';
actionCell.innerHTML = '<span class="text-gray-400">Déjà servi</span>';
} else if (action === 'no-show') {
row.className = 'bg-red-50';
statusCell.innerHTML = '<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">❌ Absent</span>';
actionCell.innerHTML = '<span class="text-gray-400">Marqué absent</span>';
}
}

// Mettre à jour les statistiques visuellement
function updateStats(action) {
// Cette fonction pourrait être améliorée pour mettre à jour les compteurs en temps réel
// Pour l'instant, on se contente d'un message
setTimeout(() => {
showMessage('Statistiques mises à jour', 'info');
}, 500);
}

// Marquer tous les tickets réservés comme consommés
function markAllAsConsumed() {
if (!confirm('Êtes-vous sûr de vouloir marquer tous les tickets réservés comme consommés ?')) {
return;
}

const reservedRows = document.querySelectorAll('[id^="reservation-"]:not(.bg-green-50):not(.bg-red-50)');
let count = 0;

reservedRows.forEach(row => {
const reservationId = row.id.split('-')[1];
const statusSpan = row.querySelector('[class*="bg-blue-100"]');

if (statusSpan && statusSpan.textContent.includes('Réservé')) {
setTimeout(() => {
markAsConsumed(parseInt(reservationId));
}, count * 200); // Délai pour éviter de surcharger le serveur
count++;
}
});

if (count > 0) {
showMessage (`${count} tickets en cours de traitement...`, 'info');
} else {
showMessage('Aucun ticket à marquer comme consommé', 'info');
}
}

// Actualiser la page
function refreshPage() {
window.location.reload();
}

// Afficher un message
function showMessage(message, type) {
const container = document.getElementById('messageContainer');
const content = document.getElementById('messageContent');

// Classes selon le type
let classes = 'px-4 py-3 rounded ';
switch (type) {
case 'success': classes += 'bg-green-100 border border-green-400 text-green-700';
break;
case 'error': classes += 'bg-red-100 border border-red-400 text-red-700';
break;
case 'info': classes += 'bg-blue-100 border border-blue-400 text-blue-700';
break;
default: classes += 'bg-gray-100 border border-gray-400 text-gray-700';
}

content.className = classes;
content.textContent = message;
container.classList.remove('hidden');

// Masquer après 5 secondes
setTimeout(() => {
container.classList.add('hidden');
}, 5000);
}

// Auto-refresh toutes les 30 secondes
setInterval(() => { // On pourrait implémenter un refresh automatique ici
console.log('Auto-refresh check...');
}, 30000);
	</script>
{% endblock %}
