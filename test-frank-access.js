const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testFrankAccess() {
    try {
        console.log('üîç Test d\'acc√®s pour Frank...');

        // R√©cup√©rer Frank
        const frank = await prisma.user.findFirst({
            where: {
                email: 'frank.quaracino@orange.fr'
            }
        });

        if (!frank) {
            console.log('‚ùå Frank non trouv√©');
            return;
        }

        console.log('‚úÖ Frank trouv√©:');
        console.log(`- ID: ${frank.id}`);
        console.log(`- Nom: ${frank.firstName} ${frank.lastName}`);
        console.log(`- Email: ${frank.email}`);
        console.log(`- R√¥le: ${frank.role}`);

        // Tester les conditions d'acc√®s courantes
        const hasDirectionAccess = ['DIRECTION', 'ADMIN'].includes(frank.role);
        const hasGestionnaireAccess = ['DIRECTION', 'GESTIONNAIRE_SITE', 'ADMIN'].includes(frank.role);

        console.log('\nüéØ Tests d\'acc√®s:');
        console.log(`- Acc√®s DIRECTION/ADMIN: ${hasDirectionAccess ? '‚úÖ' : '‚ùå'}`);
        console.log(`- Acc√®s GESTIONNAIRE_SITE/DIRECTION/ADMIN: ${hasGestionnaireAccess ? '‚úÖ' : '‚ùå'}`);

        // Simuler les v√©rifications des middlewares importants
        console.log('\nüõ°Ô∏è V√©rifications middleware:');
        console.log(`- parent-invitations/manage: ${['DIRECTION', 'ADMIN'].includes(frank.role) ? '‚úÖ' : '‚ùå'}`);
        console.log(`- directeur routes: ${['DIRECTION', 'ADMIN', 'GESTIONNAIRE_SITE'].includes(frank.role) ? '‚úÖ' : '‚ùå'}`);
        console.log(`- frank dashboard: ${['GESTIONNAIRE_SITE', 'DIRECTION'].includes(frank.role) && ['frank.quaracino@orange.fr', 'frank@ecolestmathieu.com'].includes(frank.email) ? '‚úÖ' : '‚ùå'}`);

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testFrankAccess();
