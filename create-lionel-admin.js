const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function createNewAdmin() {
    try {
        console.log('üîê Cr√©ation du nouvel administrateur...');

        // Emails √† v√©rifier (canonique + legacy)
        const canonicalEmail = 'lionel.camboulives@ecole-saint-mathieu.fr';
        const legacyEmail = 'l.camboulives@stmathieu.org';

        // V√©rifier si l'email canonique existe d√©j√†
        let existingUser = await prisma.user.findUnique({
            where: { email: canonicalEmail }
        });

        // Si pas trouv√©, v√©rifier l'ancien email pour migration
        let legacyUser = null;
        if (!existingUser) {
            legacyUser = await prisma.user.findUnique({
                where: { email: legacyEmail }
            });
        }

        const hashedPassword = await bcrypt.hash('Directeur2025!', 10);

        if (existingUser) {
            console.log('‚ö†Ô∏è  Un utilisateur avec l\'email canonique existe d√©j√†.');
            console.log('üîÑ Mise √† jour vers le r√¥le DIRECTION...');

            const updatedUser = await prisma.user.update({
                where: { email: canonicalEmail },
                data: {
                    password: hashedPassword,
                    role: 'DIRECTION'
                }
            });

            console.log('‚úÖ Utilisateur mis √† jour vers DIRECTION !');
        } else if (legacyUser) {
            console.log('‚ôªÔ∏è  Migration de l\'ancien email vers le nouveau...');

            const updatedUser = await prisma.user.update({
                where: { email: legacyEmail },
                data: {
                    email: canonicalEmail,
                    password: hashedPassword,
                    role: 'DIRECTION'
                }
            });

            console.log('‚úÖ Utilisateur migr√© vers DIRECTION !');
        } else {
            // Cr√©er un nouveau compte admin avec les bonnes donn√©es
            const newAdmin = await prisma.user.create({
                data: {
                    firstName: 'Lionel',
                    lastName: 'Camboulives',
                    email: canonicalEmail,  // Email canonique pour les tests
                    password: hashedPassword,
                    phone: '06.63.78.69.68',
                    adress: '√âcole Saint-Mathieu',
                    role: 'DIRECTION'  // R√¥le attendu par les tests
                }
            });

            console.log('üéâ Nouvel administrateur cr√©√© avec succ√®s !');
        }

        console.log('\nüìã Identifiants de connexion :');
        console.log(`üìß Email: ${canonicalEmail}`);
        console.log('üîë Mot de passe: Directeur2025!');
        console.log('üîí R√¥le: DIRECTION');
        console.log('\n‚úÖ Vous pouvez maintenant vous connecter !');

        // V√©rifier que l'admin peut bien se connecter
        const testAdmin = await prisma.user.findUnique({
            where: { email: canonicalEmail }
        });

        if (testAdmin && testAdmin.role === 'DIRECTION') {
            console.log('‚úÖ V√©rification r√©ussie - Admin pr√™t √† se connecter !');
        } else {
            console.log('‚ùå Probl√®me avec la cr√©ation de l\'admin');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error);
    } finally {
        await prisma.$disconnect();
    }
}

createNewAdmin();
