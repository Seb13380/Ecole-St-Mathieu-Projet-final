const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createSampleTravaux() {
    try {
        // R√©cup√©rer des utilisateurs avec le r√¥le DIRECTION ou ADMIN pour attribuer les travaux
        const users = await prisma.user.findMany({
            where: {
                role: {
                    in: ['DIRECTION', 'ADMIN', 'MAINTENANCE_SITE']
                }
            }
        });

        if (users.length === 0) {
            console.log('‚ùå Aucun utilisateur DIRECTION, ADMIN ou MAINTENANCE_SITE trouv√©');
            return;
        }

        const lionel = users.find(u => u.firstName.toLowerCase().includes('lionel')) || users[0];
        const frank = users.find(u => u.firstName.toLowerCase().includes('frank')) || users[0];

        console.log('üèóÔ∏è  Cr√©ation de travaux d\'exemple...');

        const travaux = [
            {
                titre: 'R√©novation de la cour de r√©cr√©ation',
                description: 'R√©fection compl√®te du sol de la cour avec nouveau rev√™tement antid√©rapant et marquages au sol.',
                dateDebut: new Date('2024-09-01'),
                dateFin: new Date('2024-10-15'),
                progression: 75,
                statut: 'EN_COURS',
                important: true,
                visible: true,
                auteurId: lionel.id
            },
            {
                titre: 'Installation √©quipements informatiques',
                description: 'Mise en place de tableaux num√©riques et ordinateurs portables dans les classes.',
                dateDebut: new Date('2024-08-15'),
                dateFin: new Date('2024-09-30'),
                progression: 100,
                statut: 'TERMINE',
                important: false,
                visible: true,
                auteurId: frank.id
            },
            {
                titre: 'R√©fection de la toiture',
                description: 'Travaux de r√©fection compl√®te de la toiture pour am√©liorer l\'isolation thermique.',
                dateDebut: new Date('2024-06-01'),
                dateFin: new Date('2024-07-31'),
                progression: 100,
                statut: 'TERMINE',
                important: true,
                visible: false, // Masqu√© car termin√©
                auteurId: lionel.id
            },
            {
                titre: 'Cr√©ation jardin p√©dagogique',
                description: 'Am√©nagement d\'un espace vert pour activit√©s p√©dagogiques avec bacs et syst√®me d\'arrosage.',
                dateDebut: new Date('2024-10-01'),
                dateFin: new Date('2024-11-30'),
                progression: 25,
                statut: 'EN_COURS',
                important: false,
                visible: true,
                auteurId: frank.id
            },
            {
                titre: 'Mise aux normes s√©curit√© incendie',
                description: 'Installation de d√©tecteurs de fum√©e et mise √† jour du syst√®me d\'alarme incendie.',
                dateDebut: new Date('2024-11-15'),
                dateFin: new Date('2024-12-20'),
                progression: 0,
                statut: 'PLANIFIE',
                important: true,
                visible: true,
                auteurId: lionel.id
            },
            {
                titre: 'R√©paration chauffage b√¢timent annexe',
                description: 'Intervention d\'urgence pour r√©parer le syst√®me de chauffage d√©faillant.',
                dateDebut: new Date('2024-09-10'),
                dateFin: new Date('2024-09-25'),
                progression: 0,
                statut: 'SUSPENDU',
                important: true,
                visible: true,
                auteurId: frank.id
            }
        ];

        for (const travauxData of travaux) {
            const travail = await prisma.travaux.create({
                data: travauxData,
                include: {
                    auteur: {
                        select: {
                            firstName: true,
                            lastName: true
                        }
                    }
                }
            });

            console.log(`‚úÖ Travaux cr√©√©s: "${travail.titre}" (${travail.statut}, ${travail.progression}%)`);
        }

        console.log(`\nüéâ ${travaux.length} travaux d'exemple cr√©√©s avec succ√®s!`);

        // Afficher un r√©sum√©
        const totalTravaux = await prisma.travaux.count();
        const travauxVisibles = await prisma.travaux.count({ where: { visible: true } });
        const travauxImportants = await prisma.travaux.count({ where: { important: true, visible: true } });
        const travauxEnCours = await prisma.travaux.count({ where: { statut: 'EN_COURS' } });

        console.log('\nüìä R√©sum√© des travaux:');
        console.log(`‚Ä¢ Total: ${totalTravaux} travaux`);
        console.log(`‚Ä¢ Visibles: ${travauxVisibles} travaux`);
        console.log(`‚Ä¢ Importants: ${travauxImportants} travaux`);
        console.log(`‚Ä¢ En cours: ${travauxEnCours} travaux`);

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation des travaux d\'exemple:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ex√©cuter le script
createSampleTravaux();
