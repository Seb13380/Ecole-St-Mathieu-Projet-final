const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('  SCRIPT DE R√âPARATION AUTOMATIQUE');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    let repairedCount = 0;
    let errors = [];

    try {
        // √âTAPE 1: Migrer les anciennes relations (parentId vers ParentStudent)
        console.log('üìã √âTAPE 1: Migration des anciennes relations parentId');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

        const studentsWithOldParentId = await prisma.student.findMany({
            where: {
                parentId: {
                    not: null
                },
                parents: {
                    none: {}
                }
            },
            select: {
                id: true,
                firstName: true,
                lastName: true,
                parentId: true
            }
        });

        console.log(`Trouv√© ${studentsWithOldParentId.length} √©l√®ves avec ancien parentId √† migrer\n`);

        for (const student of studentsWithOldParentId) {
            try {
                // V√©rifier que le parent existe
                const parentExists = await prisma.user.findUnique({
                    where: { id: student.parentId }
                });

                if (parentExists) {
                    // Cr√©er la relation dans ParentStudent
                    await prisma.parentStudent.create({
                        data: {
                            parentId: student.parentId,
                            studentId: student.id
                        }
                    });
                    console.log(`‚úÖ Relation cr√©√©e: Parent ${student.parentId} -> √âl√®ve ${student.firstName} ${student.lastName} (ID: ${student.id})`);
                    repairedCount++;
                } else {
                    console.log(`‚ö†Ô∏è  Parent ID ${student.parentId} n'existe pas pour l'√©l√®ve ${student.firstName} ${student.lastName}`);
                    errors.push(`Parent ${student.parentId} introuvable pour √©l√®ve ${student.id}`);
                }
            } catch (error) {
                if (error.code === 'P2002') {
                    console.log(`‚ÑπÔ∏è  Relation d√©j√† existante pour ${student.firstName} ${student.lastName}`);
                } else {
                    console.error(`‚ùå Erreur pour ${student.firstName} ${student.lastName}:`, error.message);
                    errors.push(`√âl√®ve ${student.id}: ${error.message}`);
                }
            }
        }

        // √âTAPE 2: Nettoyer les parents orphelins (optionnel - d√©sactiv√© par d√©faut)
        console.log('\nüìã √âTAPE 2: Analyse des parents sans enfants');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

        const parentsWithoutChildren = await prisma.user.findMany({
            where: {
                role: 'PARENT',
                enfants: {
                    none: {}
                }
            },
            select: {
                id: true,
                firstName: true,
                lastName: true,
                email: true,
                createdAt: true
            }
        });

        console.log(`Trouv√© ${parentsWithoutChildren.length} parents sans enfants`);

        // Identifier les comptes de test (cr√©√©s r√©cemment, emails de test, etc.)
        const recentDate = new Date();
        recentDate.setDate(recentDate.getDate() - 7); // Derniers 7 jours

        const testAccounts = parentsWithoutChildren.filter(parent =>
            parent.email.includes('test') ||
            parent.email.includes('temp') ||
            parent.createdAt > recentDate
        );

        if (testAccounts.length > 0) {
            console.log(`\n‚ö†Ô∏è  ${testAccounts.length} comptes potentiellement de test d√©tect√©s:`);
            testAccounts.forEach(parent => {
                console.log(`   - ${parent.firstName} ${parent.lastName} (${parent.email})`);
            });
            console.log('\n‚ö†Ô∏è  Pour supprimer ces comptes, d√©commentez la section NETTOYAGE dans le script');
        }

        /* NETTOYAGE DES COMPTES DE TEST - D√âCOMMENTEZ POUR ACTIVER
        console.log('\nüóëÔ∏è  Suppression des comptes de test...');
        for (const testAccount of testAccounts) {
            try {
                await prisma.user.delete({
                    where: { id: testAccount.id }
                });
                console.log(`‚úÖ Supprim√©: ${testAccount.firstName} ${testAccount.lastName} (${testAccount.email})`);
                repairedCount++;
            } catch (error) {
                console.error(`‚ùå Erreur suppression ${testAccount.email}:`, error.message);
                errors.push(`Suppression ${testAccount.id}: ${error.message}`);
            }
        }
        */

        // √âTAPE 3: R√©sum√©
        console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('  R√âSUM√â DE LA R√âPARATION');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`‚úÖ Relations r√©par√©es: ${repairedCount}`);
        console.log(`‚ùå Erreurs rencontr√©es: ${errors.length}`);

        if (errors.length > 0) {
            console.log('\nD√©tail des erreurs:');
            errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        // √âTAPE 4: V√©rification finale
        console.log('\nüìä V√âRIFICATION FINALE');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

        const finalParentsWithoutChildren = await prisma.user.count({
            where: {
                role: 'PARENT',
                enfants: {
                    none: {}
                }
            }
        });

        const finalStudentsWithoutParents = await prisma.student.count({
            where: {
                parents: {
                    none: {}
                }
            }
        });

        console.log(`Parents sans enfants restants: ${finalParentsWithoutChildren}`);
        console.log(`√âl√®ves sans parents restants: ${finalStudentsWithoutParents}`);

        console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('  FIN DE LA R√âPARATION');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

        return {
            success: true,
            repairedCount,
            errors,
            remainingIssues: {
                parentsWithoutChildren: finalParentsWithoutChildren,
                studentsWithoutParents: finalStudentsWithoutParents
            }
        };

    } catch (error) {
        console.error('‚ùå ERREUR FATALE:', error.message);
        console.error(error.stack);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ex√©cution
main()
    .then(results => {
        console.log('‚úÖ R√©paration termin√©e');
        if (results.remainingIssues.parentsWithoutChildren > 0 ||
            results.remainingIssues.studentsWithoutParents > 0) {
            console.log('‚ö†Ô∏è  Il reste des probl√®mes √† traiter manuellement');
            process.exit(1);
        } else {
            console.log('‚ú® Toutes les relations sont correctes !');
            process.exit(0);
        }
    })
    .catch(error => {
        console.error('‚ùå √âchec de la r√©paration:', error.message);
        process.exit(1);
    });
