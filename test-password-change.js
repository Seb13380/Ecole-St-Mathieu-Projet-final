const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testPasswordChange() {
    try {
        console.log('=== TEST CHANGEMENT DE MOT DE PASSE ===');

        // 1. R√©cup√©rer un utilisateur de test
        const testUser = await prisma.user.findFirst({
            where: { role: 'PARENT' }
        });

        if (!testUser) {
            console.log('‚ùå Aucun utilisateur parent trouv√©');
            return;
        }

        console.log('‚úÖ Utilisateur de test:', testUser.email);
        console.log('- ID:', testUser.id);
        console.log('- Nom:', testUser.firstName, testUser.lastName);

        // 2. Tester la v√©rification d'un mot de passe
        const testPassword = 'Ecole3290!'; // Mot de passe actuel suppos√©
        const isValid = await bcrypt.compare(testPassword, testUser.password);
        console.log('‚úÖ Test v√©rification mot de passe:', isValid ? 'VALIDE' : 'INVALIDE');

        // 3. Tester le hashage d'un nouveau mot de passe
        const newPassword = 'TestPassword123!';
        const hashedNewPassword = await bcrypt.hash(newPassword, 12);
        console.log('‚úÖ Nouveau mot de passe hash√© avec succ√®s');

        // 4. Simuler la mise √† jour (sans vraiment changer)
        console.log('‚úÖ Test de mise √† jour simul√© - OK');

        console.log('\nüéâ TOUS LES TESTS R√âUSSIS - Le changement de mot de passe devrait fonctionner');

    } catch (error) {
        console.error('‚ùå ERREUR:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testPasswordChange();
