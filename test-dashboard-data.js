// Test complet du dashboard
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDashboard() {
    try {
        console.log('üß™ Test des donn√©es du dashboard...\n');

        // Test 1: Compter les utilisateurs
        const userCount = await prisma.user.count();
        console.log(`üë• Nombre d'utilisateurs: ${userCount}`);

        // Test 2: Compter les inscriptions
        const inscriptionCount = await prisma.inscriptionRequest.count();
        console.log(`üìù Nombre d'inscriptions: ${inscriptionCount}`);

        // Test 3: Compter les actualit√©s
        const actualiteCount = await prisma.actualite.count();
        console.log(`üì∞ Nombre d'actualit√©s: ${actualiteCount}`);

        // Test 4: Compter les travaux
        const travauxCount = await prisma.travaux.count();
        console.log(`üèóÔ∏è Nombre de travaux: ${travauxCount}`);

        // Test 5: V√©rifier les r√¥les
        const rolesCount = await prisma.user.groupBy({
            by: ['role'],
            _count: { role: true }
        });

        console.log('\nüé≠ R√©partition des r√¥les:');
        rolesCount.forEach(r => {
            console.log(`   ${r.role}: ${r._count.role}`);
        });

        // Test 6: Inscriptions par statut
        const inscriptionsByStatus = await prisma.inscriptionRequest.groupBy({
            by: ['status'],
            _count: { status: true }
        });

        console.log('\nüìä Inscriptions par statut:');
        inscriptionsByStatus.forEach(i => {
            console.log(`   ${i.status}: ${i._count.status}`);
        });

        console.log('\n‚úÖ Test des donn√©es termin√© avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testDashboard();
