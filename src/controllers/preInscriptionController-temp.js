const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Version temporaire du contr√¥leur sans email (pour tests)
class PreInscriptionControllerTemp {

    // Afficher le formulaire de pr√©-inscription
    static async showPreInscriptionForm(req, res) {
        try {
            res.render('pages/pre-inscription', {
                title: 'Pr√©-inscription - √âcole St Mathieu',
                user: req.user || null,
                errors: req.flash('errors'),
                success: req.flash('success')
            });
        } catch (error) {
            console.error('Erreur lors de l\'affichage du formulaire:', error);
            res.status(500).render('pages/error', { message: 'Erreur serveur' });
        }
    }

    // Traiter la soumission de pr√©-inscription (SANS EMAIL pour test)
    static async submitPreInscription(req, res) {
        try {
            const {
                childFirstName,
                childLastName,
                childDateNaissance,
                parentFirstName,
                parentLastName,
                parentEmail,
                parentPhone,
                parentAdress,
                parentPassword
            } = req.body;

            // Validation des donn√©es
            if (!childFirstName || !childLastName || !parentFirstName ||
                !parentLastName || !parentEmail || !parentPhone ||
                !parentAdress || !parentPassword) {
                req.flash('errors', 'Tous les champs sont obligatoires');
                return res.redirect('/pre-inscription');
            }

            // V√©rifier si l'email existe d√©j√†
            const existingUser = await prisma.user.findUnique({
                where: { email: parentEmail }
            });

            const existingPreInscription = await prisma.preInscription.findUnique({
                where: { parentEmail: parentEmail }
            });

            if (existingUser || existingPreInscription) {
                req.flash('errors', 'Cet email est d√©j√† utilis√©');
                return res.redirect('/pre-inscription');
            }

            // Hasher le mot de passe
            const hashedPassword = await bcrypt.hash(parentPassword, 10);

            // Cr√©er la pr√©-inscription
            const preInscription = await prisma.preInscription.create({
                data: {
                    childFirstName,
                    childLastName,
                    childDateNaissance: childDateNaissance ? new Date(childDateNaissance) : null,
                    parentFirstName,
                    parentLastName,
                    parentEmail,
                    parentPhone,
                    parentAdress,
                    parentPassword: hashedPassword,
                    status: 'PENDING'
                }
            });

            // SIMULATION d'envoi d'email (sans vraiment envoyer)
            console.log('üìß SIMULATION - Email qui serait envoy√© au directeur :');
            console.log(`   √Ä: ${process.env.NODE_ENV === 'production' ? 'lionel@ecole-st-mathieu.fr' : 'sgdigitalweb13@gmail.com'}`);
            console.log(`   Sujet: Nouvelle demande de pr√©-inscription - √âcole St Mathieu`);
            console.log(`   Contenu: Demande pour ${preInscription.childFirstName} ${preInscription.childLastName}`);
            console.log(`   Parent: ${preInscription.parentFirstName} ${preInscription.parentLastName} (${preInscription.parentEmail})`);

            req.flash('success', 'Votre demande de pr√©-inscription a √©t√© enregistr√©e. Une notification a √©t√© envoy√©e √† la direction (en simulation - email d√©sactiv√© pour tests).');
            res.redirect('/pre-inscription');

        } catch (error) {
            console.error('Erreur lors de la soumission:', error);
            req.flash('errors', 'Erreur lors de l\'envoi de votre demande. Veuillez r√©essayer.');
            res.redirect('/pre-inscription');
        }
    }

    // Afficher la liste des pr√©-inscriptions (pour les admins)
    static async listPreInscriptions(req, res) {
        try {
            // V√©rifier les permissions (ADMIN ou DIRECTION seulement)
            if (!req.session.user || !['ADMIN', 'DIRECTION'].includes(req.session.user.role)) {
                return res.status(403).render('pages/error', { message: 'Acc√®s non autoris√©' });
            }

            const preInscriptions = await prisma.preInscription.findMany({
                include: {
                    processedByUser: {
                        select: {
                            firstName: true,
                            lastName: true
                        }
                    }
                },
                orderBy: {
                    createdAt: 'desc'
                }
            });

            res.render('pages/admin/pre-inscriptions-list', {
                title: 'Gestion des pr√©-inscriptions',
                user: req.session.user,
                preInscriptions,
                success: req.flash('success'),
                errors: req.flash('errors')
            });

        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration des pr√©-inscriptions:', error);
            res.status(500).render('pages/error', { message: 'Erreur serveur' });
        }
    }

    // Approuver une pr√©-inscription (SANS EMAIL pour test)
    static async approvePreInscription(req, res) {
        try {
            const { id } = req.params;

            // V√©rifier les permissions
            if (!req.session.user || !['ADMIN', 'DIRECTION'].includes(req.session.user.role)) {
                return res.status(403).json({ error: 'Acc√®s non autoris√©' });
            }

            const preInscription = await prisma.preInscription.findUnique({
                where: { id: parseInt(id) }
            });

            if (!preInscription) {
                req.flash('errors', 'Pr√©-inscription introuvable');
                return res.redirect('/admin/pre-inscriptions');
            }

            if (preInscription.status !== 'PENDING') {
                req.flash('errors', 'Cette pr√©-inscription a d√©j√† √©t√© trait√©e');
                return res.redirect('/admin/pre-inscriptions');
            }

            // Cr√©er le compte utilisateur
            const newUser = await prisma.user.create({
                data: {
                    firstName: preInscription.parentFirstName,
                    lastName: preInscription.parentLastName,
                    email: preInscription.parentEmail,
                    phone: preInscription.parentPhone,
                    adress: preInscription.parentAdress,
                    password: preInscription.parentPassword, // D√©j√† hash√©
                    role: 'PARENT'
                }
            });

            // Mettre √† jour le statut de la pr√©-inscription
            await prisma.preInscription.update({
                where: { id: parseInt(id) },
                data: {
                    status: 'APPROVED',
                    processedBy: req.session.user.id,
                    processedAt: new Date()
                }
            });

            // SIMULATION d'envoi d'email d'approbation
            console.log('üìß SIMULATION - Email d\'approbation qui serait envoy√© :');
            console.log(`   √Ä: ${preInscription.parentEmail}`);
            console.log(`   Sujet: Votre pr√©-inscription a √©t√© approuv√©e - √âcole St Mathieu`);
            console.log(`   Message: Compte parent cr√©√© avec succ√®s`);

            req.flash('success', 'Pr√©-inscription approuv√©e avec succ√®s. Le compte parent a √©t√© cr√©√©. (Email d\'approbation simul√©)');
            res.redirect('/admin/pre-inscriptions');

        } catch (error) {
            console.error('Erreur lors de l\'approbation:', error);
            req.flash('errors', 'Erreur lors de l\'approbation de la pr√©-inscription');
            res.redirect('/admin/pre-inscriptions');
        }
    }

    // Rejeter une pr√©-inscription (SANS EMAIL pour test)
    static async rejectPreInscription(req, res) {
        try {
            const { id } = req.params;

            // V√©rifier les permissions
            if (!req.session.user || !['ADMIN', 'DIRECTION'].includes(req.session.user.role)) {
                return res.status(403).json({ error: 'Acc√®s non autoris√©' });
            }

            const preInscription = await prisma.preInscription.findUnique({
                where: { id: parseInt(id) }
            });

            if (!preInscription) {
                req.flash('errors', 'Pr√©-inscription introuvable');
                return res.redirect('/admin/pre-inscriptions');
            }

            if (preInscription.status !== 'PENDING') {
                req.flash('errors', 'Cette pr√©-inscription a d√©j√† √©t√© trait√©e');
                return res.redirect('/admin/pre-inscriptions');
            }

            // Mettre √† jour le statut
            await prisma.preInscription.update({
                where: { id: parseInt(id) },
                data: {
                    status: 'REJECTED',
                    processedBy: req.session.user.id,
                    processedAt: new Date()
                }
            });

            // SIMULATION d'envoi d'email de rejet
            console.log('üìß SIMULATION - Email de rejet qui serait envoy√© :');
            console.log(`   √Ä: ${preInscription.parentEmail}`);
            console.log(`   Sujet: Concernant votre demande de pr√©-inscription - √âcole St Mathieu`);
            console.log(`   Message: Demande non retenue`);

            req.flash('success', 'Pr√©-inscription rejet√©e. (Email de notification simul√©)');
            res.redirect('/admin/pre-inscriptions');

        } catch (error) {
            console.error('Erreur lors du rejet:', error);
            req.flash('errors', 'Erreur lors du rejet de la pr√©-inscription');
            res.redirect('/admin/pre-inscriptions');
        }
    }
}

module.exports = PreInscriptionControllerTemp;
