const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Afficher l'agenda (accessible √† tous les utilisateurs connect√©s)
const getAgenda = async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est connect√©
        if (!req.session.user) {
            return res.redirect('/auth/login');
        }

        // R√©cup√©rer les √©v√©nements selon le r√¥le de l'utilisateur
        let whereClause = {};

        if (req.session.user.role === 'DIRECTION' || req.session.user.role === 'GESTIONNAIRE_SITE' || req.session.user.role === 'SECRETAIRE_DIRECTION') {
            // La direction et la secr√©taire voient tous les √©v√©nements
            whereClause = {};
        } else {
            // Les autres utilisateurs connect√©s ne voient que les √©v√©nements visibles
            whereClause = { visible: true };
        }

        const events = await prisma.agendaEvent.findMany({
            where: whereClause,
            include: {
                auteur: {
                    select: {
                        firstName: true,
                        lastName: true
                    }
                }
            },
            orderBy: {
                dateDebut: 'asc'
            }
        });

        // S√©parer les √©v√©nements pass√©s et √† venir
        const now = new Date();
        const upcomingEvents = events.filter(event => new Date(event.dateDebut) >= now);
        const pastEvents = events.filter(event => new Date(event.dateDebut) < now);

        res.render('pages/agenda/agenda', {
            title: 'Agenda Scolaire',
            upcomingEvents,
            pastEvents,
            user: req.session.user
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de l\'agenda:', error);
        res.status(500).render('pages/error', {
            message: 'Erreur lors du chargement de l\'agenda',
            title: 'Erreur',
            user: req.session.user
        });
    }
};

// Afficher la page de gestion de l'agenda (admin seulement)
const getAgendaManagement = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE', 'SECRETAIRE_DIRECTION'].includes(req.session.user.role)) {
            return res.status(403).render('pages/error', {
                message: 'Acc√®s non autoris√©',
                title: 'Erreur 403',
                user: req.session.user
            });
        }

        // R√©cup√©rer tous les √©v√©nements
        const events = await prisma.agendaEvent.findMany({
            include: {
                auteur: {
                    select: {
                        firstName: true,
                        lastName: true
                    }
                }
            },
            orderBy: {
                dateDebut: 'desc'
            }
        });

        res.render('pages/agenda/manage', {
            title: 'Gestion de l\'Agenda',
            events,
            user: req.session.user,
            successMessage: req.query.success,
            errorMessage: req.query.error
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
        res.status(500).render('pages/error', {
            message: 'Erreur lors du chargement de la gestion agenda',
            title: 'Erreur',
            user: req.session.user
        });
    }
};

// Cr√©er un nouvel √©v√©nement
const createEvent = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE'].includes(req.session.user.role)) {
            return res.status(403).json({ success: false, message: 'Acc√®s non autoris√©' });
        }

        const { titre, description, dateDebut, dateFin, heureDebut, heureFin, lieu, couleur, important, visible } = req.body;

        // Validation des donn√©es
        if (!titre || !dateDebut) {
            return res.status(400).json({
                success: false,
                message: 'Le titre et la date de d√©but sont obligatoires'
            });
        }

        // Cr√©er l'√©v√©nement
        const event = await prisma.agendaEvent.create({
            data: {
                titre,
                description: description || null,
                dateDebut: new Date(dateDebut),
                dateFin: dateFin ? new Date(dateFin) : null,
                heureDebut: heureDebut || null,
                heureFin: heureFin || null,
                lieu: lieu || null,
                couleur: couleur || '#3b82f6',
                important: important === 'true' || important === true,
                visible: visible !== 'false',
                auteurId: req.session.user.id
            }
        });

        console.log('‚úÖ √âv√©nement agenda cr√©√©:', event.titre);

        res.json({
            success: true,
            message: '√âv√©nement cr√©√© avec succ√®s',
            event
        });

    } catch (error) {
        console.error('Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la cr√©ation de l\'√©v√©nement'
        });
    }
};

// Modifier un √©v√©nement
const updateEvent = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE'].includes(req.session.user.role)) {
            return res.status(403).json({ success: false, message: 'Acc√®s non autoris√©' });
        }

        const { id } = req.params;
        const { titre, description, dateDebut, dateFin, heureDebut, heureFin, lieu, couleur, important, visible } = req.body;

        // Validation des donn√©es
        if (!titre || !dateDebut) {
            return res.status(400).json({
                success: false,
                message: 'Le titre et la date de d√©but sont obligatoires'
            });
        }

        // Mettre √† jour l'√©v√©nement
        const event = await prisma.agendaEvent.update({
            where: { id: parseInt(id) },
            data: {
                titre,
                description: description || null,
                dateDebut: new Date(dateDebut),
                dateFin: dateFin ? new Date(dateFin) : null,
                heureDebut: heureDebut || null,
                heureFin: heureFin || null,
                lieu: lieu || null,
                couleur: couleur || '#3b82f6',
                important: important === 'true' || important === true,
                visible: visible !== 'false'
            }
        });

        console.log('‚úÖ √âv√©nement agenda modifi√©:', event.titre);

        res.json({
            success: true,
            message: '√âv√©nement modifi√© avec succ√®s',
            event
        });

    } catch (error) {
        console.error('Erreur lors de la modification de l\'√©v√©nement:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la modification de l\'√©v√©nement'
        });
    }
};

// Supprimer un √©v√©nement
const deleteEvent = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE'].includes(req.session.user.role)) {
            return res.status(403).json({ success: false, message: 'Acc√®s non autoris√©' });
        }

        const { id } = req.params;

        // Supprimer l'√©v√©nement
        await prisma.agendaEvent.delete({
            where: { id: parseInt(id) }
        });

        console.log('üóëÔ∏è √âv√©nement agenda supprim√© ID:', id);

        res.json({
            success: true,
            message: '√âv√©nement supprim√© avec succ√®s'
        });

    } catch (error) {
        console.error('Erreur lors de la suppression de l\'√©v√©nement:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la suppression de l\'√©v√©nement'
        });
    }
};

// Basculer la visibilit√© d'un √©v√©nement
const toggleVisibility = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE'].includes(req.session.user.role)) {
            return res.status(403).json({ success: false, message: 'Acc√®s non autoris√©' });
        }

        const { id } = req.params;

        // R√©cup√©rer l'√©v√©nement actuel
        const currentEvent = await prisma.agendaEvent.findUnique({
            where: { id: parseInt(id) }
        });

        if (!currentEvent) {
            return res.status(404).json({
                success: false,
                message: '√âv√©nement non trouv√©'
            });
        }

        // Basculer la visibilit√©
        const event = await prisma.agendaEvent.update({
            where: { id: parseInt(id) },
            data: {
                visible: !currentEvent.visible
            }
        });

        console.log(`üëÅÔ∏è √âv√©nement agenda ${event.visible ? 'ouvert aux connect√©s' : 'r√©serv√© direction'}:`, event.titre);

        res.json({
            success: true,
            message: `√âv√©nement ${event.visible ? 'ouvert aux personnes connect√©es' : 'r√©serv√© √† la direction'} avec succ√®s`,
            visible: event.visible
        });

    } catch (error) {
        console.error('Erreur lors du changement de visibilit√©:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors du changement de visibilit√©'
        });
    }
};

// API pour r√©cup√©rer les √©v√©nements (format JSON pour calendrier)
const getEventsAPI = async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est connect√©
        if (!req.session.user) {
            return res.status(401).json({ error: 'Non autoris√©' });
        }

        // R√©cup√©rer les √©v√©nements selon le r√¥le de l'utilisateur
        let whereClause = {};

        if (req.session.user.role === 'DIRECTION' || req.session.user.role === 'GESTIONNAIRE_SITE' || req.session.user.role === 'SECRETAIRE_DIRECTION') {
            // La direction et la secr√©taire voient tous les √©v√©nements
            whereClause = {};
        } else {
            // Les autres utilisateurs connect√©s ne voient que les √©v√©nements visibles
            whereClause = { visible: true };
        }

        const events = await prisma.agendaEvent.findMany({
            where: whereClause,
            include: {
                auteur: {
                    select: {
                        firstName: true,
                        lastName: true
                    }
                }
            },
            orderBy: {
                dateDebut: 'asc'
            }
        });

        // Formater pour FullCalendar
        const formattedEvents = events.map(event => {
            const eventData = {
                id: event.id,
                title: event.titre,
                backgroundColor: event.couleur,
                borderColor: event.couleur,
                description: event.description,
                lieu: event.lieu,
                important: event.important,
                auteur: `${event.auteur.firstName} ${event.auteur.lastName}`
            };

            // Si l'√©v√©nement a une heure pr√©cise, on l'inclut
            if (event.heureDebut) {
                // Cr√©er une date compl√®te avec l'heure
                const startDate = new Date(event.dateDebut);
                const [heureDebut, minuteDebut] = event.heureDebut.split(':');
                startDate.setHours(parseInt(heureDebut), parseInt(minuteDebut || '0'), 0, 0);

                eventData.start = startDate;

                if (event.heureFin && event.dateFin) {
                    const endDate = new Date(event.dateFin);
                    const [heureFin, minuteFin] = event.heureFin.split(':');
                    endDate.setHours(parseInt(heureFin), parseInt(minuteFin || '0'), 0, 0);
                    eventData.end = endDate;
                } else if (event.heureFin) {
                    const endDate = new Date(event.dateDebut);
                    const [heureFin, minuteFin] = event.heureFin.split(':');
                    endDate.setHours(parseInt(heureFin), parseInt(minuteFin || '0'), 0, 0);
                    eventData.end = endDate;
                }
            } else {
                // √âv√©nement "toute la journ√©e" - on utilise seulement la date
                eventData.start = event.dateDebut.toISOString().split('T')[0]; // Format YYYY-MM-DD
                eventData.allDay = true;

                if (event.dateFin) {
                    eventData.end = event.dateFin.toISOString().split('T')[0];
                }
            }

            return eventData;
        });

        res.json(formattedEvents);

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des √©v√©nements API:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
};

// R√©cup√©rer un √©v√©nement sp√©cifique (pour l'√©dition)
const getEventById = async (req, res) => {
    try {
        // V√©rifier les droits d'administration
        if (!req.session.user || !['DIRECTION', 'GESTIONNAIRE_SITE'].includes(req.session.user.role)) {
            return res.status(403).json({ success: false, message: 'Acc√®s non autoris√©' });
        }

        const { id } = req.params;

        const event = await prisma.agendaEvent.findUnique({
            where: { id: parseInt(id) },
            include: {
                auteur: {
                    select: {
                        firstName: true,
                        lastName: true
                    }
                }
            }
        });

        if (!event) {
            return res.status(404).json({
                success: false,
                message: '√âv√©nement non trouv√©'
            });
        }

        // Formater les dates pour les champs input
        const formattedEvent = {
            ...event,
            dateDebut: event.dateDebut.toISOString().split('T')[0], // Format YYYY-MM-DD
            dateFin: event.dateFin ? event.dateFin.toISOString().split('T')[0] : null
        };

        res.json({
            success: true,
            event: formattedEvent
        });

    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de l\'√©v√©nement:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement'
        });
    }
};

module.exports = {
    getAgenda,
    getAgendaManagement,
    createEvent,
    updateEvent,
    deleteEvent,
    toggleVisibility,
    getEventsAPI,
    getEventById
};
