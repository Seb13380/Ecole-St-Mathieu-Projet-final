{% extends "layouts/dashboard.twig" %}

{% block title %}Analytics et Statistiques
{% endblock %}

{% block styles %}
	<style>
		.stats-card {
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}

		.stats-card:hover {
			transform: translateY(-4px);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
		}

		.chart-container {
			background: white;
			border-radius: 12px;
			padding: 1.5rem;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			margin-bottom: 1.5rem;
			transition: box-shadow 0.3s ease;
		}

		.chart-container:hover {
			box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
		}

		.loading-spinner {
			border: 3px solid #f3f3f3;
			border-top: 3px solid #3498db;
			border-radius: 50%;
			width: 20px;
			height: 20px;
			animation: spin 1s linear infinite;
		}

		@keyframes spin {
			0% {
				transform: rotate(0deg);
			}
			100% {
				transform: rotate(360deg);
			}
		}

		.progress-bar {
			transition: width 0.5s ease-in-out;
		}

		.btn-period {
			transition: all 0.3s ease;
		}

		.btn-period.active {
			background: linear-gradient(135deg, #3b82f6, #1d4ed8);
			transform: scale(1.05);
		}
	</style>
{% endblock %}

{% block content %}
	<div class="container mx-auto px-4 py-6">
		<div class="flex justify-between items-center mb-6">
			<div>
				<h1 class="text-3xl font-bold text-gray-800">📊 Analytics et Statistiques</h1>
				<p class="text-gray-600 mt-2">Tableau de bord des performances du site en temps réel</p>
			</div>

			<!-- Boutons de période -->
			<div class="flex gap-2">
				<button onclick="loadPeriod(7)" class="btn-period px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-all">7 jours</button>
				<button onclick="loadPeriod(30)" class="btn-period active px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-all">30 jours</button>
				<button onclick="loadPeriod(90)" class="btn-period px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-all">90 jours</button>
				<button onclick="exportData()" class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-all">📤 Export CSV</button>
			</div>
		</div>

		<!-- Indicateur de chargement -->
		<div id="loadingIndicator" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
			<div class="bg-white p-6 rounded-lg shadow-xl">
				<div class="flex items-center space-x-3">
					<div class="loading-spinner"></div>
					<span class="text-gray-700">Chargement des données...</span>
				</div>
			</div>
		</div>

		<!-- Statistiques générales -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
			<div class="stats-card bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white">
				<div class="text-3xl font-bold" id="totalVisits">{{ generalStats.totalVisits | number_format }}</div>
				<div class="text-purple-100">Total des visites</div>
				<div class="mt-2 text-sm text-purple-200">
					<span id="visitsGrowth" class="inline-flex items-center">
						📈 Période actuelle
					</span>
				</div>
			</div>

			<div class="stats-card bg-gradient-to-r from-pink-500 to-pink-600 rounded-xl p-6 text-white">
				<div class="text-3xl font-bold" id="uniqueVisitors">{{ generalStats.uniqueVisitors | number_format }}</div>
				<div class="text-pink-100">Visiteurs uniques</div>
				<div class="mt-2 text-sm text-pink-200">
					<span id="visitorsGrowth" class="inline-flex items-center">
						👥 Utilisateurs distincts
					</span>
				</div>
			</div>

			<div class="stats-card bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white">
				<div class="text-3xl font-bold" id="avgResponseTime">{{ generalStats.avgResponseTime }}ms</div>
				<div class="text-blue-100">Temps de réponse moyen</div>
				<div class="mt-2 text-sm text-blue-200">
					<span class="inline-flex items-center">
						{% if generalStats.avgResponseTime < 500 %}⚡ Excellent{% elseif generalStats.avgResponseTime < 1000 %}✅ Bon{% else %}⚠️ À améliorer
						{% endif %}
					</span>
				</div>
			</div>

			<div class="stats-card bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white">
				<div class="text-3xl font-bold" id="successRate">{{ generalStats.successRate }}%</div>
				<div class="text-green-100">Taux de succès</div>
				<div class="mt-2 text-sm text-green-200">
					<span class="inline-flex items-center">
						{% if generalStats.successRate > 95 %}🎯 Excellent{% elseif generalStats.successRate > 90 %}✅ Bon{% else %}⚠️ À surveiller
						{% endif %}
					</span>
				</div>
			</div>
		</div>

		<!-- Graphique des visites quotidiennes -->
		<div class="chart-container">
			<div class="flex justify-between items-center mb-4">
				<h2 class="text-xl font-semibold">📈 Évolution des visites</h2>
				<div class="text-sm text-gray-500">
					<span id="lastUpdate">Dernière mise à jour:
						{{ "now"|date("d/m/Y H:i") }}</span>
				</div>
			</div>
			<canvas id="dailyVisitsChart" width="400" height="100"></canvas>
		</div>

		<div
			class="grid grid-cols-1 lg:grid-cols-2 gap-8">
			<!-- Types d'appareils -->
			<div class="chart-container">
				<h2 class="text-xl font-semibold mb-4">📱 Types d'appareils</h2>
				<div class="space-y-4" id="deviceTypesContainer">
					<div class="flex justify-between items-center">
						<div class="flex items-center space-x-2">
							<span>🖥️ Desktop</span>
							<div class="bg-gray-200 rounded-full h-2 w-32">
								<div class="bg-blue-500 h-2 rounded-full progress-bar" style="width: {{ deviceTypes.desktop }}%" id="desktopBar"></div>
							</div>
						</div>
						<span class="font-bold" id="desktopPercent">{{ deviceTypes.desktop }}%</span>
					</div>
					<div class="flex justify-between items-center">
						<div class="flex items-center space-x-2">
							<span>📱 Mobile</span>
							<div class="bg-gray-200 rounded-full h-2 w-32">
								<div class="bg-green-500 h-2 rounded-full progress-bar" style="width: {{ deviceTypes.mobile }}%" id="mobileBar"></div>
							</div>
						</div>
						<span class="font-bold" id="mobilePercent">{{ deviceTypes.mobile }}%</span>
					</div>
					<div class="flex justify-between items-center">
						<div class="flex items-center space-x-2">
							<span>📟 Tablette</span>
							<div class="bg-gray-200 rounded-full h-2 w-32">
								<div class="bg-yellow-500 h-2 rounded-full progress-bar" style="width: {{ deviceTypes.tablet }}%" id="tabletBar"></div>
							</div>
						</div>
						<span class="font-bold" id="tabletPercent">{{ deviceTypes.tablet }}%</span>
					</div>
				</div>
			</div>

			<!-- Pages populaires -->
			<div class="chart-container">
				<h2 class="text-xl font-semibold mb-4">🔥 Pages populaires</h2>
				<div id="popularPagesList" class="space-y-2 max-h-60 overflow-y-auto">
					{% for page in popularPages %}
						<div class="flex justify-between items-center py-2 px-3 hover:bg-gray-50 rounded-lg transition-colors">
							<span class="text-sm truncate font-medium">{{ page.route }}</span>
							<span class="font-bold text-blue-600">{{ page.visits }}</span>
						</div>
					{% endfor %}
				</div>
			</div>
		</div>

		<!-- Trafic par heure -->
		<div class="chart-container mt-8">
			<h2 class="text-xl font-semibold mb-4">🕐 Trafic par heure de la journée</h2>
			<canvas id="hourlyTrafficChart" width="400" height="100"></canvas>
		</div>
	</div>
{% endblock %}

{% block scripts %}
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		// Variables globales pour les graphiques
let dailyChart,
hourlyChart;
let currentPeriod = 30;

// Données initiales
let dailyData = {{ dailyVisits | raw }};
let hourlyData = {{ hourlyTraffic | raw }};

document.addEventListener('DOMContentLoaded', function () {
initializeCharts();
});

function initializeCharts() { // Graphique des visites quotidiennes
const dailyCtx = document.getElementById('dailyVisitsChart').getContext('2d');
dailyChart = new Chart(dailyCtx, {
type: 'line',
data: {
labels: dailyData.map(d => new Date(d.date).toLocaleDateString('fr-FR', {
day: '2-digit',
month: '2-digit'
})),
datasets: [
{
label: 'Visites',
data: dailyData.map(d => d.visits),
borderColor: 'rgb(59, 130, 246)',
backgroundColor: 'rgba(59, 130, 246, 0.1)',
tension: 0.4,
fill: true,
borderWidth: 3,
pointBackgroundColor: 'rgb(59, 130, 246)',
pointBorderColor: '#ffffff',
pointBorderWidth: 2,
pointRadius: 5,
pointHoverRadius: 8
}
]
},
options: {
responsive: true,
interaction: {
intersect: false,
mode: 'index'
},
plugins: {
legend: {
display: false
},
tooltip: {
backgroundColor: 'rgba(0, 0, 0, 0.8)',
titleColor: '#ffffff',
bodyColor: '#ffffff',
borderColor: 'rgb(59, 130, 246)',
borderWidth: 1
}
},
scales: {
y: {
beginAtZero: true,
ticks: {
precision: 0
},
grid: {
color: 'rgba(0, 0, 0, 0.1)'
}
},
x: {
grid: {
color: 'rgba(0, 0, 0, 0.1)'
}
}
}
}
});

// Graphique du trafic horaire
const hourlyCtx = document.getElementById('hourlyTrafficChart').getContext('2d');
hourlyChart = new Chart(hourlyCtx, {
type: 'bar',
data: {
labels: hourlyData.map(d => d.hour + 'h'),
datasets: [
{
label: 'Visites',
data: hourlyData.map(d => d.visits),
backgroundColor: 'rgba(34, 197, 94, 0.8)',
borderColor: 'rgb(34, 197, 94)',
borderWidth: 2,
borderRadius: 4,
borderSkipped: false
}
]
},
options: {
responsive: true,
plugins: {
legend: {
display: false
},
tooltip: {
backgroundColor: 'rgba(0, 0, 0, 0.8)',
titleColor: '#ffffff',
bodyColor: '#ffffff',
borderColor: 'rgb(34, 197, 94)',
borderWidth: 1
}
},
scales: {
y: {
beginAtZero: true,
ticks: {
precision: 0
},
grid: {
color: 'rgba(0, 0, 0, 0.1)'
}
},
x: {
grid: {
color: 'rgba(0, 0, 0, 0.1)'
}
}
}
}
});
}

// Fonction pour changer de période
async function loadPeriod(days) {
try {
showLoading();
currentPeriod = days;

// Mettre à jour les boutons actifs
document.querySelectorAll('.btn-period').forEach(btn => {
btn.classList.remove('active', 'bg-blue-500', 'hover:bg-blue-600');
btn.classList.add('bg-gray-500', 'hover:bg-gray-600');
});
event.target.classList.remove('bg-gray-500', 'hover:bg-gray-600');
event.target.classList.add('active', 'bg-blue-500', 'hover:bg-blue-600');

window.location.reload();

hideLoading();
} catch (error) {
console.error('Erreur:', error);
hideLoading();
showNotification('Erreur lors du chargement des données: ' + error.message, 'error');
}
}

function exportData() {
const startDate = new Date();
startDate.setDate(startDate.getDate() - currentPeriod);
const endDate = new Date();

window.open(`/directeur/analytics/export?startDate=${
startDate.toISOString()
}&endDate=${
endDate.toISOString()
}&format=csv`);
}

function showLoading() {
document.getElementById('loadingIndicator').classList.remove('hidden');
}

function hideLoading() {
document.getElementById('loadingIndicator').classList.add('hidden');
}

function showNotification(message, type = 'info') { // Créer une notification toast
const notification = document.createElement('div');
notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg text-white max-w-sm transform transition-transform duration-300 translate-x-full`;

switch (type) {
case 'success': notification.classList.add('bg-green-500');
break;
case 'error': notification.classList.add('bg-red-500');
break;
case 'warning': notification.classList.add('bg-yellow-500');
break;
default: notification.classList.add('bg-blue-500');
}

notification.innerHTML = `
        <div class="flex items-center justify-between">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
                ✕
            </button>
        </div>
    `;

document.body.appendChild(notification);

// Animer l'entrée
setTimeout(() => {
notification.classList.remove('translate-x-full');
}, 100);

// Auto-suppression après 5 secondes
setTimeout(() => {
notification.classList.add('translate-x-full');
setTimeout(() => notification.remove(), 300);
}, 5000);
}
	</script>
{% endblock %}
