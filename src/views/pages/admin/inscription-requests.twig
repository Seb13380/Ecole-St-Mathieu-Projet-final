{% extends "layouts/base.twig" %}

{% block title %}Demandes d'inscription - Administration
{% endblock %}

{% block main %}
	<div class="container mx-auto px-4 py-8">
		<div class="flex justify-between items-center mb-8">
			<h1 class="text-3xl font-bold text-[#304a4d]">Demandes d'inscription en attente</h1>
			<div class="flex gap-2">
				{% set pendingCount = 0 %}
				{% set approvedCount = 0 %}
				{% set rejectedCount = 0 %}
				{% for request in requests %}
					{% if request.status == 'PENDING' or request.status == 'EN_ATTENTE' or request.status == 'EMAIL_PENDING' %}
						{% set pendingCount = pendingCount + 1 %}
					{% elseif request.status == 'ACCEPTED' or request.status == 'VALIDE' or request.status == 'APPROVED' %}
						{% set approvedCount = approvedCount + 1 %}
					{% elseif request.status == 'REJECTED' or request.status == 'REFUSE' %}
						{% set rejectedCount = rejectedCount + 1 %}
					{% endif %}
				{% endfor %}
				<span class="badge badge-warning">{{ pendingCount }}
					en attente</span>
				<span class="badge badge-success">{{ approvedCount }}
					approuv√©es</span>
				<span class="badge badge-error">{{ rejectedCount }}
					refus√©es</span>
			</div>
		</div>

		<!-- Filtres -->
		<div class="mb-8 bg-gray-50 p-4 rounded-lg">
			<div class="flex flex-wrap gap-3 mb-4 items-center">
				<span class="text-gray-700 font-medium">Filtrer par statut :</span>
				<button class="filter-btn btn btn-outline" data-status="all">Toutes ({{ requests|length }})</button>
				<button class="filter-btn btn btn-warning" data-status="pending">En attente ({{ pendingCount }})</button>
				<button class="filter-btn btn btn-success" data-status="approved">Approuv√©es ({{ approvedCount }})</button>
				<button class="filter-btn btn btn-error" data-status="rejected">Refus√©es ({{ rejectedCount }})</button>
			</div>

			<div class="flex flex-wrap gap-3 items-center">
				<span class="text-gray-700 font-medium">Filtrer par ann√©e scolaire :</span>
				<select class="select select-bordered" id="yearFilter">
					<option value="">Toutes les ann√©es</option>
					<option value="2025/2026">2025/2026</option>
					<option value="2024/2025">2024/2025</option>
				</select>
			</div>

			<!-- üÜï Champ de recherche -->
			<div class="flex flex-wrap gap-3 items-center mt-4">
				<span class="text-gray-700 font-medium">üîç Rechercher :</span>
				<input type="text" id="searchInput" placeholder="Tapez le nom ou pr√©nom des parents..." class="input input-bordered w-full max-w-md" onkeyup="filterBySearch()">
				<button onclick="clearSearch()" class="btn btn-ghost px-4 py-2 min-w-[80px]">Effacer</button>
			</div>
		</div>

		<!-- Liste des demandes -->
		<div id="requestsList">
			{% for request in requests %}
				<div
					class="request-item bg-white rounded-lg shadow-md p-6 mb-6" data-status="{{ request.status }}" data-year="{{ request.submittedAt|date('Y') }}" data-parent-first-name="{{ request.parentFirstName ?? request.pereInfo.prenom ?? '' }}" data-parent-last-name="{{ request.parentLastName ?? request.pereInfo.nom ?? '' }}" data-parent-email="{{ request.parentEmail }}" data-search-content="{{ request.parentFirstName ?? request.pereInfo.prenom ?? '' }} {{ request.parentLastName ?? request.pereInfo.nom ?? '' }} {{ request.mereInfo.prenom ?? '' }} {{ request.mereInfo.nom ?? '' }} {{ request.parentEmail }}">

					<!-- En-t√™te de la demande -->
					<div class="flex justify-between items-start mb-4">
						<div>
							<h2 class="text-xl font-semibold text-[#304a4d]">
								{{ request.parentFirstName }}
								{{ request.parentLastName }}
							</h2>
							<p class="text-gray-600">{{ request.parentEmail }}</p>
							<p class="text-gray-600">{{ request.parentPhone }}</p>
							<span class="badge badge-info">{{ request.submittedAt|date('Y') }}/{{ request.submittedAt|date('Y') + 1 }}</span>
						</div>

						<div class="text-right">
							{% if request.status == 'PENDING' or request.status == 'EN_ATTENTE' or request.status == 'EMAIL_PENDING' %}
								<span class="badge badge-warning badge-lg">En attente</span>
							{% elseif request.status == 'ACCEPTED' or request.status == 'VALIDE' or request.status == 'APPROVED' %}
								<span class="badge badge-success badge-lg">Approuv√©e</span>
							{% elseif request.status == 'REJECTED' or request.status == 'REFUSE' %}
								<span class="badge badge-error badge-lg">Refus√©e</span>
							{% else %}
								<span class="badge badge-secondary badge-lg">{{ request.status }}</span>
							{% endif %}
							<p class="text-sm text-gray-500 mt-1">
								Demande du
								{{ request.submittedAt|date('d/m/Y √† H:i') }}
							</p>
						</div>
					</div>

					<!-- Informations des parents -->
					<div class="grid md:grid-cols-2 gap-6 mb-6">
						<div class="bg-blue-50 p-4 rounded-lg">
							<h3 class="font-semibold text-[#304a4d] mb-3 flex items-center gap-2">
								üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Informations des parents
							</h3>

							{% if request.type == 'DOSSIER_INSCRIPTION' and request.pereInfo %}
								<!-- Dossier complet avec p√®re et m√®re -->
								<div class="mb-3">
									<h4 class="font-medium text-blue-700">üë® P√®re</h4>
									<p>{{ request.pereInfo.prenom }}
										{{ request.pereInfo.nom }}</p>
									<p class="text-sm text-gray-600">{{ request.pereInfo.email }}</p>
									<p class="text-sm text-gray-600">{{ request.pereInfo.telephone }}</p>
									{% if request.pereInfo.profession %}
										<p class="text-sm text-gray-600">{{ request.pereInfo.profession }}</p>
									{% endif %}
								</div>

								{% if request.mereInfo %}
									<div>
										<h4 class="font-medium text-blue-700">üë© M√®re</h4>
										<p>{{ request.mereInfo.prenom }}
											{{ request.mereInfo.nom }}</p>
										<p class="text-sm text-gray-600">{{ request.mereInfo.email }}</p>
										<p class="text-sm text-gray-600">{{ request.mereInfo.telephone }}</p>
										{% if request.mereInfo.profession %}
											<p class="text-sm text-gray-600">{{ request.mereInfo.profession }}</p>
										{% endif %}
									</div>
								{% endif %}
							{% else %}
								<!-- Pr√©-inscription simple -->
								<p>
									<strong>{{ request.parentFirstName }}
										{{ request.parentLastName }}</strong>
								</p>
								<p class="text-sm text-gray-600">{{ request.parentEmail }}</p>
								<p class="text-sm text-gray-600">{{ request.parentPhone }}</p>

								<!-- Affichage des 2 parents si disponible -->
								{% if request.parentsInfo.pere or request.parentsInfo.mere %}
									<div class="mt-3 pt-3 border-t border-blue-200">
										{% if request.parentsInfo.pere %}
											<div class="mb-2">
												<h4 class="font-medium text-blue-700">üë® P√®re</h4>
												<p class="text-sm">{{ request.parentsInfo.pere }}</p>
											</div>
										{% endif %}
										{% if request.parentsInfo.mere %}
											<div>
												<h4 class="font-medium text-blue-700">üë© M√®re</h4>
												<p class="text-sm">{{ request.parentsInfo.mere }}</p>
											</div>
										{% endif %}
									</div>
								{% endif %}
							{% endif %}

							<div class="mt-3">
								<h4 class="font-medium text-blue-700">üè† Adresse</h4>
								<p class="text-sm">{{ request.parentAddress }}</p>
							</div>
						</div>

						<!-- Informations enfant(s) -->
						<div class="bg-green-50 p-4 rounded-lg">
							<h3 class="font-semibold text-[#304a4d] mb-3 flex items-center gap-2">
								üë∂ Enfant(s) √† inscrire
							</h3>

							{% if request.children and request.children|length > 0 %}
								{% for child in request.children %}
									<div class="mb-3 {% if not loop.last %}border-b border-green-200 pb-3{% endif %}">
										<p>
											<strong>{{ child.firstName }}
												{{ child.lastName }}</strong>
										</p>
										<p class="text-sm text-gray-600">
											N√©(e) le
											{{ child.birthDate|date('d/m/Y') }}
										</p>
										{% if child.requestedClass %}
											<p class="text-sm">
												<span class="text-gray-600">Classe demand√©e :</span>
												<span class="badge badge-primary">{{ child.requestedClass }}</span>
											</p>
										{% endif %}
									</div>
								{% endfor %}
							{% else %}
								<p class="text-gray-500">Aucune information enfant disponible</p>
							{% endif %}
						</div>
					</div>

					<!-- Actions -->
					<div class="flex gap-2 justify-end">
						<button class="btn btn-info btn-outline" onclick="viewDetails({{ request.id }})">
							Voir d√©tails
						</button>

						{% if request.status == 'PENDING' or request.status == 'EN_ATTENTE' or request.status == 'EMAIL_PENDING' %}
							<button class="btn btn-error" onclick="showRejectModal({{ request.id }})">
								Refuser
							</button>
							{% if request.type == 'DOSSIER_INSCRIPTION' %}
								<button class="btn btn-success" onclick="showValidateModal({{ request.id }})">
									Valider
								</button>
							{% else %}
								<button class="btn btn-success" onclick="showApproveModal({{ request.id }})">
									Approuver
								</button>
							{% endif %}
						{% elseif request.status == 'ACCEPTED' or request.status == 'VALIDE' %}
							<button class="btn btn-primary" onclick="showFinalizeModal({{ request.id }})">
								Finaliser inscription
							</button>
							<button class="btn btn-outline" onclick="showDeleteModal({{ request.id }})">
								üóëÔ∏è Supprimer
							</button>
						{% else %}
							<button class="btn btn-outline" onclick="showDeleteModal({{ request.id }})">
								üóëÔ∏è Supprimer
							</button>
						{% endif %}
					</div>
				</div>
			{% else %}
				<div class="text-center py-12">
					<p class="text-gray-500 text-lg">Aucune demande d'inscription trouv√©e.</p>
				</div>
			{% endfor %}
		</div>
	</div>

	<!-- Modales -->
	<!-- Modal Approuver -->
	<div id="approveModal" class="modal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Approuver la demande</h3>
			<form id="approveForm">
				<div class="py-4">
					<label class="label">
						<span class="label-text">Commentaire (optionnel)</span>
					</label>
					<textarea class="textarea textarea-bordered w-full" name="comment" placeholder="Commentaire pour les parents..."></textarea>
				</div>
				<div class="modal-action">
					<button type="button" class="btn" onclick="closeModal('approveModal')">Annuler</button>
					<button type="submit" class="btn btn-success">Approuver</button>
				</div>
			</form>
		</div>
	</div>

	<!-- Modal Valider -->
	<div id="validateModal" class="modal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Valider le dossier</h3>
			<form id="validateForm">
				<div class="py-4">
					<label class="label">
						<span class="label-text">Commentaire (optionnel)</span>
					</label>
					<textarea class="textarea textarea-bordered w-full" name="comment" placeholder="Commentaire pour les parents..."></textarea>
				</div>
				<div class="modal-action">
					<button type="button" class="btn" onclick="closeModal('validateModal')">Annuler</button>
					<button type="submit" class="btn btn-success">Valider</button>
				</div>
			</form>
		</div>
	</div>

	<!-- Modal Finaliser -->
	<div id="finalizeModal" class="modal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Finaliser l'inscription</h3>
			<form id="finalizeForm">
				<div class="py-4">
					<p class="mb-4">Cette action va cr√©er les comptes utilisateurs et finaliser l'inscription.</p>
					<label class="label">
						<span class="label-text">Commentaire (optionnel)</span>
					</label>
					<textarea class="textarea textarea-bordered w-full" name="comment" placeholder="Notes administratives..."></textarea>
				</div>
				<div class="modal-action">
					<button type="button" class="btn" onclick="closeModal('finalizeModal')">Annuler</button>
					<button type="submit" class="btn btn-primary">Finaliser</button>
				</div>
			</form>
		</div>
	</div>

	<!-- Modal Refuser -->
	<div id="rejectModal" class="modal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Refuser la demande</h3>
			<form id="rejectForm">
				<div class="py-4">
					<label class="label">
						<span class="label-text">Motif du refus
							<span class="text-red-500">*</span>
						</span>
					</label>
					<textarea class="textarea textarea-bordered w-full" name="reason" placeholder="Expliquez le motif du refus..." required></textarea>
				</div>
				<div class="modal-action">
					<button type="button" class="btn" onclick="closeModal('rejectModal')">Annuler</button>
					<button type="submit" class="btn btn-error">Refuser</button>
				</div>
			</form>
		</div>
	</div>

	<!-- Modal Supprimer -->
	<div id="deleteModal" class="modal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Supprimer la demande</h3>
			<p class="py-4">√ätes-vous s√ªr de vouloir supprimer d√©finitivement cette demande ?</p>
			<div class="modal-action">
				<button type="button" class="btn" onclick="closeModal('deleteModal')">Annuler</button>
				<button type="button" class="btn btn-error" id="confirmDelete">Supprimer</button>
			</div>
		</div>
	</div>

	<script src="/assets/js/modal-system.js"></script>
	<script>
		let currentRequestId = null;

// Fonctions pour ouvrir les modales
function showApproveModal(id) {
currentRequestId = id;
document.getElementById('approveModal').classList.add('modal-open');
}

function showValidateModal(id) {
currentRequestId = id;
document.getElementById('validateModal').classList.add('modal-open');
}

function showFinalizeModal(id) {
currentRequestId = id;
document.getElementById('finalizeModal').classList.add('modal-open');
}

function showRejectModal(id) {
currentRequestId = id;
document.getElementById('rejectModal').classList.add('modal-open');
}

function showDeleteModal(id) {
currentRequestId = id;
document.getElementById('deleteModal').classList.add('modal-open');
}

function closeModal(modalId) {
document.getElementById(modalId).classList.remove('modal-open');
currentRequestId = null;
}

function viewDetails(id) {
window.location.href = `/directeur/inscriptions/${id}/details`;
}

// Gestionnaires de formulaires
document.getElementById('approveForm').addEventListener('submit', async (e) => {
e.preventDefault();
const formData = new FormData(e.target);

try {
const response = await fetch (`/directeur/inscriptions/${currentRequestId}/approve`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{comment: formData.get('comment')}
)
});

const result = await response.json();
if (result.success) {
showSuccessModal('Approbation r√©ussie', 'La demande a √©t√© approuv√©e avec succ√®s.');
setTimeout(() => location.reload(), 2000);
} else {
showErrorModal('Erreur d\'approbation', result.message);
}
} catch (error) {
showErrorModal('Erreur d\'approbation', 'Une erreur est survenue lors de l\'approbation.');
}

closeModal('approveModal');
});

document.getElementById('validateForm').addEventListener('submit', async (e) => {
e.preventDefault();
const formData = new FormData(e.target);

try {
const response = await fetch (`/directeur/inscriptions/${currentRequestId}/validate`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{comment: formData.get('comment')}
)
});

const result = await response.json();
if (result.success) {
showSuccessModal('Validation r√©ussie', 'Le dossier a √©t√© valid√© avec succ√®s. Un email de confirmation a √©t√© envoy√© aux parents.');
setTimeout(() => location.reload(), 2000);
} else {
showErrorModal('Erreur de validation', result.message);
}
} catch (error) {
showErrorModal('Erreur de validation', 'Une erreur est survenue lors de la validation du dossier.');
}

closeModal('validateModal');
});

document.getElementById('finalizeForm').addEventListener('submit', async (e) => {
e.preventDefault();
const formData = new FormData(e.target);

try {
const response = await fetch (`/directeur/rendez-vous-inscriptions/${currentRequestId}/finalize`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{comment: formData.get('comment')}
)
});

const result = await response.json();
if (result.success) {
showSuccessModal('Finalisation r√©ussie', 'L\'inscription a √©t√© finalis√©e avec succ√®s. Les comptes ont √©t√© cr√©√©s.');
setTimeout(() => location.reload(), 2000);
} else {
showErrorModal('Erreur de finalisation', result.message);
}
} catch (error) {
showErrorModal('Erreur de finalisation', 'Une erreur est survenue lors de la finalisation.');
}

closeModal('finalizeModal');
});

document.getElementById('rejectForm').addEventListener('submit', async (e) => {
e.preventDefault();
const formData = new FormData(e.target);

try {
const response = await fetch (`/directeur/inscriptions/${currentRequestId}/reject`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{reason: formData.get('reason')}
)
});

const result = await response.json();
if (result.success) {
showSuccessModal('Demande refus√©e', 'La demande a √©t√© refus√©e et un email a √©t√© envoy√© aux parents.');
setTimeout(() => location.reload(), 2000);
} else {
showErrorModal('Erreur de refus', result.message);
}
} catch (error) {
showErrorModal('Erreur de refus', 'Une erreur est survenue lors du refus.');
}

closeModal('rejectModal');
});

document.getElementById('confirmDelete').addEventListener('click', async () => {
try {
const response = await fetch (`/directeur/inscriptions/${currentRequestId}/delete`, {method: 'DELETE'});

const result = await response.json();
if (result.success) {
showSuccessModal('Suppression r√©ussie', 'La demande a √©t√© supprim√©e d√©finitivement.');
setTimeout(() => location.reload(), 2000);
} else {
showErrorModal('Erreur de suppression', result.message);
}
} catch (error) {
showErrorModal('Erreur de suppression', 'Une erreur est survenue lors de la suppression.');
}

closeModal('deleteModal');
});

// Filtres
document.querySelectorAll('.filter-btn').forEach(btn => {
btn.addEventListener('click', (e) => {
const status = e.target.dataset.status;
filterByStatus(status);

// Mettre √† jour l'apparence des boutons
document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('btn-active'));
e.target.classList.add('btn-active');
});
});

document.getElementById('yearFilter').addEventListener('change', (e) => {
const year = e.target.value;
filterByYear(year);
});

// üÜï Fonction de recherche par nom/pr√©nom
function filterBySearch() {
const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
const requests = document.querySelectorAll('.request-item');
let visibleCount = 0;

requests.forEach(item => {
if (! searchTerm) {
item.style.display = 'block';
visibleCount++;
return;
}

// Rechercher dans le contenu consolid√©
const searchContent = item.dataset.searchContent ?. toLowerCase() || '';
const found = searchContent.includes(searchTerm);

if (found) {
item.style.display = 'block';
visibleCount++;
} else {
item.style.display = 'none';
}
});

updateSearchResults(visibleCount, searchTerm);
}

// üÜï Effacer la recherche
function clearSearch() {
document.getElementById('searchInput').value = '';
filterBySearch();
}

// üÜï Afficher les r√©sultats de recherche
function updateSearchResults(count, searchTerm) {
let resultText = document.getElementById('searchResults');
if (! resultText) {
resultText = document.createElement('div');
resultText.id = 'searchResults';
resultText.className = 'text-sm text-gray-600 mt-2';
document.getElementById('searchInput').parentNode.appendChild(resultText);
}

if (searchTerm) {
resultText.textContent = `${count} r√©sultat${
count > 1 ? 's' : ''
} trouv√©${
count > 1 ? 's' : ''
} pour "${searchTerm}"`;
resultText.style.display = 'block';
} else {
resultText.style.display = 'none';
}
}

function filterByStatus(status) {
const requests = document.querySelectorAll('.request-item');
requests.forEach(item => {
if (status === 'all') {
item.style.display = 'block';
} else {
const itemStatus = item.dataset.status;
const show = (status === 'pending' && ['PENDING', 'EN_ATTENTE', 'EMAIL_PENDING'].includes(itemStatus)) || (status === 'approved' && ['ACCEPTED', 'VALIDE', 'APPROVED'].includes(itemStatus)) || (status === 'rejected' && ['REJECTED', 'REFUSE'].includes(itemStatus));
item.style.display = show ? 'block' : 'none';
}
});
}

function filterByYear(year) {
const requests = document.querySelectorAll('.request-item');
requests.forEach(item => {
if (! year) {
item.style.display = 'block';
} else {
const itemYear = item.dataset.year;
item.style.display = itemYear === year ? 'block' : 'none';
}
});
}

// Modales de succ√®s et d'erreur
function showSuccessModal(title, message) {
const modalHtml = `
<div id="successModal" class="modal modal-open">
<div class="modal-box">
<div class="flex items-center gap-3 mb-4">
<div class="text-4xl">‚úÖ</div>
<h3 class="font-bold text-lg text-green-600">${title}</h3>
</div>
<p class="py-4">${message}</p>
<div class="modal-action">
<button type="button" class="btn btn-success" onclick="closeSuccessModal()">OK</button>
</div>
</div>
</div>
`;
document.body.insertAdjacentHTML('beforeend', modalHtml);
}

function showErrorModal(title, message) {
const modalHtml = `
<div id="errorModal" class="modal modal-open">
<div class="modal-box">
<div class="flex items-center gap-3 mb-4">
<div class="text-4xl">‚ùå</div>
<h3 class="font-bold text-lg text-red-600">${title}</h3>
</div>
<p class="py-4">${message}</p>
<div class="modal-action">
<button type="button" class="btn btn-error" onclick="closeErrorModal()">OK</button>
</div>
</div>
</div>
`;
document.body.insertAdjacentHTML('beforeend', modalHtml);
}

function closeSuccessModal() {
const modal = document.getElementById('successModal');
if (modal) 
modal.remove();



}

function closeErrorModal() {
const modal = document.getElementById('errorModal');
if (modal) 
modal.remove();



}
	</script>

{% endblock %}
