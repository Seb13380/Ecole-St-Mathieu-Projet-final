{% extends "layouts/base.twig" %}

{% block title %}Calendrier des repas -
	{{ student.firstName }}
{% endblock %}

{% block main %}
	<div class="min-h-screen bg-blue-50 py-8">
		<div
			class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">

			<!-- En-t√™te -->
			<div class="mb-8">
				<div class="flex items-center justify-between">
					<div>
						<h1 class="text-3xl font-bold text-blue-900 mb-2">üóìÔ∏è Calendrier des repas</h1>
						<p class="text-blue-700">{{ student.firstName }}
							{{ student.lastName }}
							-
							{{ student.classe.nom }}</p>
					</div>
					<div class="text-right">
						<div class="text-lg font-semibold text-gray-900">Tickets restants</div>
						<div class="text-3xl font-bold {% if student.totalTicketsRemaining > 5 %}text-green-600{% elseif student.totalTicketsRemaining > 2 %}text-orange-600{% else %}text-red-600{% endif %}">
							{{ student.totalTicketsRemaining }}
						</div>
						<a href="/parent/tickets/purchase" class="text-sm text-blue-600 hover:text-blue-800">Acheter des tickets</a>
					</div>
				</div>
			</div>

			<!-- Messages de succ√®s/erreur -->
			{% if success %}
				<div class="mb-6 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
					<strong>Succ√®s :</strong>
					{{ success }}
				</div>
			{% endif %}

			{% if error %}
				<div class="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
					<strong>Erreur :</strong>
					{{ error }}
				</div>
			{% endif %}

			<!-- Alertes selon les tickets restants -->
			{% if student.totalTicketsRemaining <= 0 %}
				<div class="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
					‚ö†Ô∏è
					<strong>Aucun ticket disponible !</strong>
					<a href="/parent/tickets/purchase" class="underline font-semibold">Achetez des tickets</a>
					pour pouvoir r√©server des repas.
				</div>
			{% elseif student.totalTicketsRemaining <= 2 %}
				<div class="mb-6 bg-orange-100 border border-orange-400 text-orange-700 px-4 py-3 rounded">
					‚ö°
					<strong>Attention :</strong>
					Il ne reste que
					{{ student.totalTicketsRemaining }}
					tickets. Pensez √† en racheter bient√¥t.
				</div>
			{% endif %}

			<!-- Navigation du calendrier -->
			<div class="bg-white rounded-lg shadow-lg p-6 mb-6">
				<div class="flex items-center justify-between mb-4">
					<button onclick="changeMonth(-1)" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
						‚Üê Mois pr√©c√©dent
					</button>
					<h2 id="currentMonthYear" class="text-xl font-semibold text-gray-900"></h2>
					<button onclick="changeMonth(1)" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
						Mois suivant ‚Üí
					</button>
				</div>

				<!-- Calendrier -->
				<div
					class="grid grid-cols-7 gap-1 mb-4">
					<!-- En-t√™tes des jours -->
					<div class="p-3 text-center font-semibold text-gray-600">Lun</div>
					<div class="p-3 text-center font-semibold text-gray-600">Mar</div>
					<div class="p-3 text-center font-semibold text-gray-600">Mer</div>
					<div class="p-3 text-center font-semibold text-gray-600">Jeu</div>
					<div class="p-3 text-center font-semibold text-gray-600">Ven</div>
					<div class="p-3 text-center font-semibold text-gray-600">Sam</div>
					<div class="p-3 text-center font-semibold text-gray-600">Dim</div>
				</div>

				<!-- Cases du calendrier (g√©n√©r√©es par JavaScript) -->
				<div
					id="calendar-grid" class="grid grid-cols-7 gap-1"><!-- Les cases seront g√©n√©r√©es par JavaScript -->
				</div>
			</div>

			<!-- L√©gende -->
			<div class="bg-white rounded-lg shadow-lg p-6 mb-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">üìã L√©gende</h3>
				<div class="grid grid-cols-2 md:grid-cols-4 gap-4">
					<div class="flex items-center">
						<div class="w-4 h-4 bg-green-500 rounded mr-2"></div>
						<span class="text-sm">R√©serv√©</span>
					</div>
					<div class="flex items-center">
						<div class="w-4 h-4 bg-blue-500 rounded mr-2"></div>
						<span class="text-sm">Consomm√©</span>
					</div>
					<div class="flex items-center">
						<div class="w-4 h-4 bg-gray-300 rounded mr-2"></div>
						<span class="text-sm">Week-end/Vacances</span>
					</div>
					<div class="flex items-center">
						<div class="w-4 h-4 bg-red-300 rounded mr-2"></div>
						<span class="text-sm">Annul√©</span>
					</div>
				</div>
			</div>

			<!-- Boutons d'action -->
			<div class="text-center">
				<a href="/parent/tickets/child/{{ student.id }}" class="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-300 transition-colors mr-4">
					‚Üê Retour aux tickets
				</a>
				<a href="/parent/tickets/purchase" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
					üõí Acheter des tickets
				</a>
			</div>
		</div>
	</div>

	<!-- Modal de confirmation -->
	<div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
		<div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Confirmer la r√©servation</h3>
			<p id="confirmationText" class="text-gray-600 mb-6"></p>
			<div class="flex justify-end space-x-3">
				<button onclick="closeModal()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400">
					Annuler
				</button>
				<button onclick="confirmReservation()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
					Confirmer
				</button>
			</div>
		</div>
	</div>

{% endblock %}

{% block scripts %}
	{{ parent() }}
	<script>
		// Variables globales
let currentMonth = {{ currentMonth }};
let currentYear = {{ currentYear }};
let studentId = {{ student.id }};
let ticketsRemaining = {{ student.totalTicketsRemaining }};
let selectedDate = null;

// R√©servations existantes (depuis le serveur)
const existingReservations = [{% for reservation in reservations %}
{
date: new Date('{{ reservation.mealDate|date('Y-m-d') }}'),
status: '{{ reservation.status }}'
}
{% if not loop.last %},{% endif %}{% endfor %}];

// Noms des mois
const monthNames = [
'Janvier',
'F√©vrier',
'Mars',
'Avril',
'Mai',
'Juin',
'Juillet',
'Ao√ªt',
'Septembre',
'Octobre',
'Novembre',
'D√©cembre'
];

// Initialiser le calendrier
document.addEventListener('DOMContentLoaded', function () {
generateCalendar();
});

function generateCalendar() { // Mettre √† jour le titre
document.getElementById('currentMonthYear').textContent = `${
monthNames[currentMonth]
} ${currentYear}`;

const grid = document.getElementById('calendar-grid');
grid.innerHTML = '';

// Premier jour du mois
const firstDay = new Date(currentYear, currentMonth, 1);
const lastDay = new Date(currentYear, currentMonth + 1, 0);

// Ajuster pour commencer le lundi (0 = dimanche, 1 = lundi, etc.)
let startDay = firstDay.getDay();
startDay = startDay === 0 ? 6 : startDay - 1;
// Convertir dimanche=0 en dimanche=6

// Cases vides pour les jours pr√©c√©dents
for (let i = 0; i < startDay; i++) {
const cell = document.createElement('div');
cell.className = 'p-3 text-center text-gray-300';
grid.appendChild(cell);
}

// Cases pour chaque jour du mois
for (let day = 1; day <= lastDay.getDate(); day++) {
const cell = document.createElement('div');
const currentDate = new Date(currentYear, currentMonth, day);
const today = new Date();
today.setHours(0, 0, 0, 0);
currentDate.setHours(0, 0, 0, 0);

// Classes de base
cell.className = 'p-3 text-center border border-gray-200 relative cursor-pointer hover:bg-gray-50';
cell.textContent = day;

// V√©rifier si c'est un week-end
const dayOfWeek = currentDate.getDay();
const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
// Dimanche ou samedi

// V√©rifier s'il y a une r√©servation
const reservation = existingReservations.find(r => r.date.getTime() === currentDate.getTime());

if (isWeekend) { // Week-end - pas de cantine
cell.className += ' bg-gray-200 text-gray-500 cursor-not-allowed';
} else if (currentDate < today) { // Date pass√©e
if (reservation) {
if (reservation.status === 'CONSUMED') {
cell.className += ' bg-blue-500 text-white';
cell.innerHTML += '<div class="text-xs">Consomm√©</div>';
} else if (reservation.status === 'CANCELLED') {
cell.className += ' bg-red-300 text-white';
cell.innerHTML += '<div class="text-xs">Annul√©</div>';
} else {
cell.className += ' bg-orange-500 text-white';
cell.innerHTML += '<div class="text-xs">Manqu√©</div>';
}
} else {
cell.className += ' bg-gray-100 text-gray-400 cursor-not-allowed';
}
} else { // Date future - peut √™tre cliqu√©e
if (reservation && reservation.status === 'RESERVED') {
cell.className += ' bg-green-500 text-white';
cell.innerHTML += '<div class="text-xs">R√©serv√©</div>';
cell.onclick = () => showCancelConfirmation(day);
} else if (ticketsRemaining > 0) {
cell.className += ' hover:bg-blue-100 border-blue-300';
cell.onclick = () => showReservationConfirmation(day);
} else {
cell.className += ' bg-gray-100 text-gray-400 cursor-not-allowed';
cell.innerHTML += '<div class="text-xs">Pas de tickets</div>';
}
} grid.appendChild(cell);
}
}

function changeMonth(direction) {
currentMonth += direction;
if (currentMonth > 11) {
currentMonth = 0;
currentYear++;
} else if (currentMonth < 0) {
currentMonth = 11;
currentYear--;
}
generateCalendar();
}

function showReservationConfirmation(day) {
selectedDate = day;
const dateStr = `${day} ${
monthNames[currentMonth]
} ${currentYear}`;
document.getElementById('confirmationText').textContent = `Voulez-vous r√©server le repas du ${dateStr} ? Cela utilisera 1 ticket.`;
document.getElementById('confirmationModal').classList.remove('hidden');
document.getElementById('confirmationModal').classList.add('flex');
}

function showCancelConfirmation(day) {
selectedDate = day;
const dateStr = `${day} ${
monthNames[currentMonth]
} ${currentYear}`;
document.getElementById('confirmationText').textContent = `Voulez-vous annuler la r√©servation du ${dateStr} ? Le ticket sera rembours√©.`;
document.getElementById('confirmationModal').classList.remove('hidden');
document.getElementById('confirmationModal').classList.add('flex');
}

function closeModal() {
document.getElementById('confirmationModal').classList.add('hidden');
document.getElementById('confirmationModal').classList.remove('flex');
selectedDate = null;
}

function confirmReservation() {
if (! selectedDate) 
return;


const mealDate = new Date(currentYear, currentMonth, selectedDate);
const formData = new FormData();
formData.append('studentId', studentId);
formData.append('mealDate', mealDate.toISOString().split('T')[0]);

fetch('/parent/tickets/reserve', {
method: 'POST',
body: formData
}).then(response => {
if (response.ok) {
window.location.reload();
} else {
alert('Erreur lors de la r√©servation');
}
}).catch(error => {
console.error('Erreur:', error);
alert('Erreur lors de la r√©servation');
});

closeModal();
}
	</script>
{% endblock %}
