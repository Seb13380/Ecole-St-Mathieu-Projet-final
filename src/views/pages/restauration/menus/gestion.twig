{% extends "layouts/base.twig" %}

{% block content %}
	<div class="container mx-auto px-4 py-8">
		<div class="max-w-6xl mx-auto">
			<div class="bg-white rounded-lg shadow-lg p-6">
				<div class="flex justify-between items-center mb-6">
					<h1 class="text-3xl font-bold text-gray-800">Gestion des menus</h1>
					<a href="/directeur/menus/ajouter" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
						Ajouter un menu
					</a>
				</div>

				<!-- Alertes -->
				<div id="alert-container" class="mb-4 hidden">
					<div id="alert" class="p-4 rounded-lg"></div>
				</div>

				<!-- Tableau des menus -->
				<div class="overflow-x-auto">
					<table class="w-full border-collapse border border-gray-300">
						<thead>
							<tr class="bg-gray-100">

								<th class="border border-gray-300 px-4 py-2 text-left">Fichier</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Statut</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Actif</th>
								<th class="border border-gray-300 px-4 py-2 text-left">Actions</th>
							</tr>
						</thead>
						<tbody>
							{% for menu in menus %}
								<tr class="hover:bg-gray-50">
									<td class="border border-gray-300 px-4 py-2">{{ menu.semaine }}</td>
									<td class="border border-gray-300 px-4 py-2">
										{{ menu.dateDebut|date('d/m/Y') }}
										-
										{{ menu.dateFin|date('d/m/Y') }}
									</td>
									<td class="border border-gray-300 px-4 py-2">
										<a href="{{ menu.pdfUrl }}" target="_blank" class="text-blue-600 hover:text-blue-800">
											{{ menu.pdfFilename }}
										</a>
									</td>
									<td class="border border-gray-300 px-4 py-2">
										<span class="inline-block px-2 py-1 rounded-full text-xs font-medium
																								                                    {% if menu.statut == 'ACTIF' %}bg-green-100 text-green-800
																								                                    {% elseif menu.statut == 'PLANIFIE' %}bg-yellow-100 text-yellow-800
																								                                    {% else %}bg-red-100 text-red-800{% endif %}">
											{{ menu.statut }}
										</span>
									</td>
									<td class="border border-gray-300 px-4 py-2 text-center">
										{% if menu.actif %}
											<span class="text-green-600 font-bold">✓</span>
										{% else %}
											<button onclick="activerMenu({{ menu.id }})" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm transition-colors">
												Activer
											</button>
										{% endif %}
									</td>
									<td class="border border-gray-300 px-4 py-2">
										<div class="flex gap-2">
											{% if menu.statut == 'BROUILLON' %}
												<button onclick="planifierMenu({{ menu.id }})" class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm transition-colors">
													Planifier
												</button>
											{% endif %}

											{% if not menu.actif %}
												<button onclick="supprimerMenu({{ menu.id }})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors">
													Supprimer
												</button>
											{% endif %}
										</div>
									</td>
								</tr>
							{% else %}
								<tr>
									<td colspan="6" class="border border-gray-300 px-4 py-8 text-center text-gray-500">
										Aucun menu disponible.
										<a href="/directeur/menus/ajouter" class="text-blue-600 hover:text-blue-800">Ajouter le premier menu</a>
									</td>
								</tr>
							{% endfor %}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>

	<script>
		function showAlert(message, type = 'success') {
const alertContainer = document.getElementById('alert-container');
const alert = document.getElementById('alert');

alert.className = `p-4 rounded-lg ${
type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
}`;
alert.textContent = message;

alertContainer.classList.remove('hidden');

setTimeout(() => {
alertContainer.classList.add('hidden');
}, 5000);
}

async function activerMenu(menuId) {
try {
const response = await fetch (`/directeur/menus/${menuId}/activer`, {
method: 'PUT',
headers: {
'Content-Type': 'application/json'
}
});

if (response.ok) {
showAlert('Menu activé avec succès');
location.reload();
} else {
const error = await response.json();
showAlert(error.error || 'Erreur lors de l\'activation', 'error');
}
} catch (error) {
showAlert('Erreur de communication avec le serveur', 'error');
}
}

async function planifierMenu(menuId) {
try {
const response = await fetch (`/directeur/menus/${menuId}/planifier`, {
method: 'PUT',
headers: {
'Content-Type': 'application/json'
}
});

if (response.ok) {
showAlert('Menu planifié avec succès');
location.reload();
} else {
const error = await response.json();
showAlert(error.error || 'Erreur lors de la planification', 'error');
}
} catch (error) {
showAlert('Erreur de communication avec le serveur', 'error');
}
}

async function supprimerMenu(menuId) {
if (!confirm('Êtes-vous sûr de vouloir supprimer ce menu ? Cette action est irréversible.')) {
return;
}

try {
const response = await fetch (`/directeur/menus/${menuId}`, {
method: 'DELETE',
headers: {
'Content-Type': 'application/json'
}
});

if (response.ok) {
showAlert('Menu supprimé avec succès');
location.reload();
} else {
const error = await response.json();
showAlert(error.error || 'Erreur lors de la suppression', 'error');
}
} catch (error) {
showAlert('Erreur de communication avec le serveur', 'error');
}
}
	</script>
{% endblock %}
