// Middleware pour v√©rifier l'authentification
const requireAuth = (req, res, next) => {
    console.log('üîê V√©rification auth');
    console.log('üìã Session ID:', req.sessionID);
    console.log('üìã Session compl√®te:', req.session);
    console.log('üë§ Session user:', req.session.user ? 'Pr√©sent' : 'Absent');
    console.log('üìã Headers re√ßus:', {
        'accept': req.headers.accept,
        'content-type': req.headers['content-type'],
        'x-requested-with': req.headers['x-requested-with'],
        'cookie': req.headers.cookie,
        'xhr': req.xhr
    });

    if (!req.session.user) {
        console.log('‚ùå Redirection vers login - pas de session');

        // Si c'est une requ√™te AJAX/API, renvoyer du JSON
        if (req.xhr ||
            req.headers.accept && req.headers.accept.indexOf('json') > -1 ||
            req.headers['content-type'] && req.headers['content-type'].indexOf('json') > -1 ||
            req.headers['x-requested-with'] === 'XMLHttpRequest') {
            console.log('üîÑ Requ√™te AJAX d√©tect√©e - retour JSON');
            return res.status(401).json({
                success: false,
                error: 'Non authentifi√©',
                message: 'Vous devez √™tre connect√© pour acc√©der √† cette page'
            });
        }

        console.log('üåê Requ√™te normale - redirection');
        return res.redirect('/auth/login?message=Vous devez √™tre connect√© pour acc√©der √† cette page');
    }
    console.log('‚úÖ Authentification OK pour:', req.session.user.email);
    next();
};

const requireRole = (roles) => {
    return (req, res, next) => {
        if (!req.session.user) {
            // Si c'est une requ√™te AJAX/API, renvoyer du JSON
            if (req.xhr ||
                req.headers.accept && req.headers.accept.indexOf('json') > -1 ||
                req.headers['content-type'] && req.headers['content-type'].indexOf('json') > -1 ||
                req.headers['x-requested-with'] === 'XMLHttpRequest') {
                return res.status(401).json({
                    success: false,
                    error: 'Non authentifi√©',
                    message: 'Vous devez √™tre connect√© pour acc√©der √† cette page'
                });
            }
            return res.redirect('/auth/login?message=Vous devez √™tre connect√© pour acc√©der √† cette page');
        }

        const allowedRoles = Array.isArray(roles) ? roles : [roles];

        if (!allowedRoles.includes(req.session.user.role)) {
            // Si c'est une requ√™te AJAX/API, renvoyer du JSON
            if (req.xhr ||
                req.headers.accept && req.headers.accept.indexOf('json') > -1 ||
                req.headers['content-type'] && req.headers['content-type'].indexOf('json') > -1 ||
                req.headers['x-requested-with'] === 'XMLHttpRequest') {
                return res.status(403).json({
                    success: false,
                    error: 'Acc√®s refus√©',
                    message: 'Vous n\'avez pas les permissions n√©cessaires pour acc√©der √† cette page'
                });
            }
            return res.status(403).render('pages/error', {
                message: 'Vous n\'avez pas les permissions n√©cessaires pour acc√©der √† cette page',
                title: 'Acc√®s refus√©'
            });
        }

        next();
    };
};

const requireAdmin = (req, res, next) => {
    console.log('üëë V√©rification admin - Session user:', req.session.user ? req.session.user.email : 'Absent');
    if (!req.session.user) {
        console.log('‚ùå Redirection vers login - pas de session admin');
        return res.redirect('/auth/login?message=Vous devez √™tre connect√© pour acc√©der √† cette page');
    }

    const allowedRoles = ['ADMIN', 'DIRECTION', 'GESTIONNAIRE_SITE'];
    console.log('üé≠ R√¥le utilisateur:', req.session.user.role, 'R√¥les autoris√©s:', allowedRoles);

    if (!allowedRoles.includes(req.session.user.role)) {
        console.log('‚ùå Acc√®s refus√© - r√¥le insuffisant');
        return res.status(403).render('pages/error', {
            message: 'Vous n\'avez pas les permissions n√©cessaires pour acc√©der √† cette page',
            title: 'Acc√®s refus√©',
            user: req.session.user
        });
    }

    console.log('‚úÖ Acc√®s admin autoris√©');
    next();
};

const requireEnseignant = requireRole(['ENSEIGNANT', 'ADMIN', 'DIRECTION']);

const requireParent = requireRole(['PARENT', 'ADMIN', 'DIRECTION']);

const requireDirection = (req, res, next) => {
    console.log('üè¢ V√©rification DIRECTION - Session user:', req.session.user ? req.session.user.email : 'Absent');
    if (!req.session.user) {
        console.log('‚ùå Redirection vers login - pas de session direction');
        return res.redirect('/auth/login');
    }

    console.log('üé≠ R√¥le utilisateur:', req.session.user.role);
    const allowedRoles = ['DIRECTEUR', 'DIRECTION', 'ADMIN', 'GESTIONNAIRE_SITE', 'SECRETAIRE_DIRECTION'];
    if (!allowedRoles.includes(req.session.user.role)) {
        console.log('‚ùå Acc√®s refus√© - r√¥le insuffisant pour direction');
        return res.status(403).render('pages/error', {
            message: 'Acc√®s refus√©. R√©serv√© aux directeurs, secr√©taires et gestionnaires.',
            user: req.session.user
        });
    }

    console.log('‚úÖ Acc√®s direction autoris√©');
    next();
};

const requireSecretary = (req, res, next) => {
    console.log('üìã V√©rification SECR√âTAIRE - Session user:', req.session.user ? req.session.user.email : 'Absent');
    if (!req.session.user) {
        console.log('‚ùå Redirection vers login - pas de session secr√©taire');
        return res.redirect('/auth/login');
    }

    console.log('üé≠ R√¥le utilisateur:', req.session.user.role);
    const allowedRoles = ['SECRETAIRE_DIRECTION', 'DIRECTION', 'ADMIN', 'GESTIONNAIRE_SITE'];
    if (!allowedRoles.includes(req.session.user.role)) {
        console.log('‚ùå Acc√®s refus√© - r√¥le insuffisant pour secr√©tariat');
        return res.status(403).render('pages/error', {
            message: 'Acc√®s refus√©. R√©serv√© au secr√©tariat de direction.',
            user: req.session.user
        });
    }

    console.log('‚úÖ Acc√®s secr√©tariat autoris√©');
    next();
};

const requireAPEL = requireRole(['APEL', 'ADMIN', 'DIRECTION']);

module.exports = {
    requireAuth,
    requireRole,
    requireAdmin,
    requireEnseignant,
    requireParent,
    requireDirection,
    requireSecretary,
    requireAPEL
};
