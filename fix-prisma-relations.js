const { exec } = require('child_process');
const util = require('util');

const execAsync = util.promisify(exec);

async function fixPrismaRelations() {
    try {
        console.log('üîß Correction des relations Prisma...');

        // 1. G√©n√©rer le client Prisma
        console.log('üì¶ G√©n√©ration du client Prisma...');
        await execAsync('npx prisma generate');
        console.log('‚úÖ Client Prisma g√©n√©r√©');

        // 2. Appliquer les migrations
        console.log('üîÑ Application des migrations...');
        await execAsync('npx prisma migrate dev --name fix-inscription-relations');
        console.log('‚úÖ Migrations appliqu√©es');

        // 3. V√©rifier la base de donn√©es
        console.log('üîç V√©rification de la base de donn√©es...');
        await execAsync('npx prisma db push');
        console.log('‚úÖ Base de donn√©es synchronis√©e');

        console.log('\nüéâ Corrections Prisma termin√©es avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la correction Prisma:', error.message);

        // Si erreur, essayer de forcer la synchronisation
        try {
            console.log('üîß Tentative de synchronisation forc√©e...');
            await execAsync('npx prisma db push --force-reset');
            await execAsync('npx prisma generate');
            console.log('‚úÖ Synchronisation forc√©e r√©ussie');
        } catch (forceError) {
            console.error('‚ùå Erreur lors de la synchronisation forc√©e:', forceError.message);
        }
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    fixPrismaRelations();
}

module.exports = { fixPrismaRelations };
