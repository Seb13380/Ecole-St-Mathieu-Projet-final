#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDatabaseConnection() {
    try {
        console.log('üîç TEST DE CONNEXION √Ä LA BASE DE DONN√âES\n');

        // Test 1: Connexion basique
        console.log('1Ô∏è‚É£ Test de connexion basique...');
        await prisma.$connect();
        console.log('‚úÖ Connexion Prisma √©tablie');

        // Test 2: Requ√™te simple
        console.log('\n2Ô∏è‚É£ Test de requ√™te simple...');
        const userCount = await prisma.user.count();
        console.log(`‚úÖ Nombre d'utilisateurs: ${userCount}`);

        // Test 3: Lecture de quelques utilisateurs
        console.log('\n3Ô∏è‚É£ Test de lecture des utilisateurs...');
        const users = await prisma.user.findMany({
            take: 5,
            select: {
                id: true,
                firstName: true,
                lastName: true,
                email: true,
                role: true
            }
        });

        console.log('‚úÖ Utilisateurs r√©cup√©r√©s:');
        users.forEach(user => {
            console.log(`   ‚Ä¢ ${user.firstName} ${user.lastName} (${user.email}) - ${user.role}`);
        });

        // Test 4: V√©rification des tables
        console.log('\n4Ô∏è‚É£ Test des tables principales...');

        const counts = {
            users: await prisma.user.count(),
            students: await prisma.student.count(),
            documents: await prisma.document.count(),
            actualites: await prisma.actualite.count()
        };

        console.log('‚úÖ Compteurs des tables:');
        Object.entries(counts).forEach(([table, count]) => {
            console.log(`   ‚Ä¢ ${table}: ${count} enregistrements`);
        });

        // Test 5: Informations de connexion
        console.log('\n5Ô∏è‚É£ Informations de connexion...');
        console.log(`   üìã DATABASE_URL: ${process.env.DATABASE_URL}`);
        console.log(`   üåê Serveur: ${process.env.DATABASE_URL?.includes('localhost') ? 'Local' : 'Distant'}`);

        console.log('\nüéâ R√âSULTAT: Base de donn√©es connect√©e et fonctionnelle!');

    } catch (error) {
        console.error('\n‚ùå ERREUR DE CONNEXION √Ä LA BASE DE DONN√âES:');
        console.error('Type:', error.name);
        console.error('Message:', error.message);

        if (error.code === 'ECONNREFUSED') {
            console.error('\nüîß DIAGNOSTIC:');
            console.error('‚Ä¢ MySQL/MariaDB n\'est pas d√©marr√©');
            console.error('‚Ä¢ V√©rifiez que le serveur de base de donn√©es fonctionne');
            console.error('‚Ä¢ Port 3306 peut √™tre occup√© par un autre service');
        } else if (error.code === 'ENOTFOUND') {
            console.error('\nüîß DIAGNOSTIC:');
            console.error('‚Ä¢ Adresse du serveur introuvable');
            console.error('‚Ä¢ V√©rifiez DATABASE_URL dans .env');
        } else if (error.message.includes('Access denied')) {
            console.error('\nüîß DIAGNOSTIC:');
            console.error('‚Ä¢ Identifiants incorrect (utilisateur/mot de passe)');
            console.error('‚Ä¢ V√©rifiez DATABASE_URL dans .env');
        } else if (error.message.includes('database') && error.message.includes('does not exist')) {
            console.error('\nüîß DIAGNOSTIC:');
            console.error('‚Ä¢ La base de donn√©es "ecole_st_mathieu" n\'existe pas');
            console.error('‚Ä¢ Cr√©ez la base ou v√©rifiez le nom dans DATABASE_URL');
        }

        console.error('\nüõ†Ô∏è  SOLUTIONS:');
        console.error('1. V√©rifiez que MySQL/MariaDB est d√©marr√©');
        console.error('2. V√©rifiez DATABASE_URL dans .env');
        console.error('3. Testez la connexion manuellement: mysql -u root -p');
        console.error('4. Si n√©cessaire, cr√©ez la base: CREATE DATABASE ecole_st_mathieu;');
    } finally {
        await prisma.$disconnect();
    }
}

testDatabaseConnection();
