const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function diagnoseFinalizeIssue() {
    console.log('üîç === DIAGNOSTIC PROBL√àME FINALISATION LIONEL ===\n');

    try {
        // 1. V√©rifier s'il y a des demandes ACCEPTED (pr√™tes pour finalisation)
        const acceptedRequests = await prisma.preInscriptionRequest.findMany({
            where: {
                status: 'ACCEPTED'
            },
            orderBy: {
                processedAt: 'desc'
            }
        });

        console.log(`üìä Demandes ACCEPTED (pr√™tes pour finalisation): ${acceptedRequests.length}`);

        if (acceptedRequests.length === 0) {
            console.log('\n‚ùå PROBL√àME IDENTIFI√â: Aucune demande en statut ACCEPTED');
            console.log('   Les demandes doivent d\'abord √™tre accept√©es par Lionel depuis la page des demandes d\'inscription');
            console.log('   URL: https://www.stmathieu.org/directeur/inscriptions');
            console.log('\nüîß SOLUTION:');
            console.log('   1. Lionel doit aller sur /directeur/inscriptions');
            console.log('   2. Cliquer sur "Approuver" pour chaque demande');
            console.log('   3. Ensuite les demandes appara√Ætront sur /directeur/rendez-vous-inscriptions');
        } else {
            console.log('\n‚úÖ Demandes pr√™tes pour finalisation:');
            acceptedRequests.forEach((req, index) => {
                console.log(`${index + 1}. ${req.parentFirstName} ${req.parentLastName} (${req.parentEmail})`);
                console.log(`   Accept√©e le: ${req.processedAt?.toLocaleString('fr-FR') || 'Non renseign√©'}`);
                console.log(`   Par: ID ${req.processedBy || 'Non renseign√©'}`);
            });
        }

        // 2. V√©rifier les demandes PENDING qui attendent d'√™tre accept√©es
        const pendingRequests = await prisma.preInscriptionRequest.findMany({
            where: {
                status: 'PENDING'
            },
            orderBy: {
                submittedAt: 'desc'
            }
        });

        console.log(`\nüìã Demandes PENDING (en attente d'approbation): ${pendingRequests.length}`);

        if (pendingRequests.length > 0) {
            console.log('\n‚è≥ Demandes en attente d\'approbation par Lionel:');
            pendingRequests.forEach((req, index) => {
                console.log(`${index + 1}. ${req.parentFirstName} ${req.parentLastName} (${req.parentEmail})`);
                console.log(`   Soumise le: ${req.submittedAt.toLocaleString('fr-FR')}`);
                console.log(`   Email valid√©: ${req.emailValidated ? '‚úÖ' : '‚ùå'}`);
            });
        }

        // 3. V√©rifier les inscriptions d√©j√† finalis√©es
        const completedRequests = await prisma.preInscriptionRequest.findMany({
            where: {
                status: 'COMPLETED'
            },
            orderBy: {
                processedAt: 'desc'
            },
            take: 5
        });

        console.log(`\n‚úÖ Inscriptions finalis√©es r√©centes: ${completedRequests.length}`);
        completedRequests.forEach((req, index) => {
            console.log(`${index + 1}. ${req.parentFirstName} ${req.parentLastName} (${req.parentEmail})`);
            console.log(`   Finalis√©e le: ${req.processedAt?.toLocaleString('fr-FR') || 'Non renseign√©'}`);
        });

        // 4. V√©rifier les permissions de Lionel
        const lionel = await prisma.user.findFirst({
            where: {
                email: 'l.camboulives@stmathieu.org'
            }
        });

        console.log('\nüë§ Informations Lionel:');
        if (lionel) {
            console.log(`   Nom: ${lionel.firstName} ${lionel.lastName}`);
            console.log(`   R√¥le: ${lionel.role}`);
            console.log(`   Compte cr√©√©: ${lionel.createdAt.toLocaleString('fr-FR')}`);
            console.log(`   Mot de passe: ${lionel.password ? 'D√©fini ‚úÖ' : 'Non d√©fini ‚ùå'}`);
        } else {
            console.log('   ‚ùå Compte Lionel non trouv√©');
        }

        // 5. R√©sum√© et recommandations
        console.log('\nüéØ === R√âSUM√â DIAGNOSTIC ===');

        if (acceptedRequests.length === 0 && pendingRequests.length > 0) {
            console.log('üîß PROBL√àME: Les demandes sont en PENDING, pas en ACCEPTED');
            console.log('üìã SOLUTION: Lionel doit d\'abord approuver les demandes');
            console.log('   1. Se connecter: https://www.stmathieu.org/auth/login');
            console.log('   2. Aller sur: https://www.stmathieu.org/directeur/inscriptions');
            console.log('   3. Cliquer "Approuver" sur chaque demande');
            console.log('   4. Ensuite aller sur: https://www.stmathieu.org/directeur/rendez-vous-inscriptions');
            console.log('   5. Cliquer "Finaliser l\'inscription" sur chaque demande');
        } else if (acceptedRequests.length > 0) {
            console.log('‚úÖ STATUT: Demandes pr√™tes pour finalisation');
            console.log('üìç URL: https://www.stmathieu.org/directeur/rendez-vous-inscriptions');
            console.log(`   ${acceptedRequests.length} demande(s) √† finaliser`);
        } else {
            console.log('‚ÑπÔ∏è STATUT: Aucune demande en cours de traitement');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
    } finally {
        await prisma.$disconnect();
    }
}

diagnoseFinalizeIssue().catch(console.error);