const emailService = require('./src/services/emailService');

/**
 * TEST SIMPLE DES EMAILS AVEC VOS ADRESSES SP√âCIFIQUES
 * - sgdigitalweb13@gmail.com pour l'admin
 * - sebcecg@gmail.com pour le parent
 */

async function testEmailsSpecifiques() {
    console.log('üìß === TEST EMAILS SP√âCIFIQUES ===');
    console.log('=================================\n');

    const ADMIN_EMAIL = 'sgdigitalweb13@gmail.com';
    const PARENT_EMAIL = 'sebcecg@gmail.com';

    try {
        console.log('üîß TEST 1: Configuration du service email...');

        // V√©rifier la configuration
        console.log('   üìù Variables d\'environnement:');
        console.log(`      EMAIL_USER: ${process.env.EMAIL_USER || 'NON D√âFINI'}`);
        console.log(`      EMAIL_SERVICE: ${process.env.EMAIL_SERVICE || 'NON D√âFINI'}`);
        console.log(`      TEST_MODE: ${process.env.TEST_MODE || 'false'}`);
        console.log(`      TEST_EMAIL: ${process.env.TEST_EMAIL || 'NON D√âFINI'}`);

        // Test de connexion
        console.log('\n   üîå Test de connexion SMTP...');
        try {
            const connectionTest = await emailService.testConnection();
            if (connectionTest) {
                console.log('   ‚úÖ Connexion SMTP r√©ussie !');
            } else {
                console.log('   ‚ùå Probl√®me de connexion SMTP');
            }
        } catch (connError) {
            console.log('   ‚ùå Erreur de connexion:', connError.message);
        }

        console.log('\nüì§ TEST 2: Email notification admin (nouvelle demande)...');

        const nouvelleDemandeData = {
            requestId: 'TEST_001',
            parentName: 'S√©bastien Test Parent',
            parentEmail: PARENT_EMAIL,
            parentPhone: '0123456789',
            children: [
                { firstName: 'Emma', lastName: 'Test', birthDate: '2018-05-15' },
                { firstName: 'Lucas', lastName: 'Test', birthDate: '2020-09-22' }
            ],
            createdAt: new Date()
        };

        console.log(`   üìß Destinataire admin: ${ADMIN_EMAIL}`);
        console.log(`   üë§ Parent demandeur: ${nouvelleDemandeData.parentName}`);
        console.log(`   üë∂ Enfants: ${nouvelleDemandeData.children.length}`);
        console.log('   üìù Pr√©paration de l\'email...');

        // Ici vous pouvez d√©commenter pour envoyer l'email r√©el
        /*
        try {
            const adminNotificationResult = await emailService.sendNewInscriptionNotification({
                adminEmail: ADMIN_EMAIL,
                ...nouvelleDemandeData
            });
            
            if (adminNotificationResult.success) {
                console.log('   ‚úÖ Email admin envoy√© avec succ√®s !');
                console.log(`   üì¨ Message ID: ${adminNotificationResult.messageId}`);
            } else {
                console.log('   ‚ùå Erreur envoi admin:', adminNotificationResult.error);
            }
        } catch (emailError) {
            console.log('   ‚ùå Erreur technique admin:', emailError.message);
        }
        */
        console.log('   ‚úÖ Email admin pr√©par√© (envoi simul√©)');

        console.log('\nüì§ TEST 3: Email confirmation parent (inscription approuv√©e)...');

        const confirmationData = {
            parentFirstName: 'S√©bastien',
            parentLastName: 'Test Parent',
            parentEmail: PARENT_EMAIL,
            children: nouvelleDemandeData.children,
            loginCredentials: {
                email: PARENT_EMAIL,
                password: 'VotreMotDePasse123!' // En r√©alit√©, c'est celui choisi par le parent
            }
        };

        console.log(`   üìß Destinataire parent: ${PARENT_EMAIL}`);
        console.log(`   üë§ Parent: ${confirmationData.parentFirstName} ${confirmationData.parentLastName}`);
        console.log(`   üîë Email de connexion: ${confirmationData.loginCredentials.email}`);
        console.log('   üìù Pr√©paration de l\'email de confirmation...');

        // Ici vous pouvez d√©commenter pour envoyer l'email r√©el
        /*
        try {
            const confirmationResult = await emailService.sendAccountActivatedEmail(confirmationData);
            
            if (confirmationResult.success) {
                console.log('   ‚úÖ Email confirmation envoy√© avec succ√®s !');
                console.log(`   üì¨ Message ID: ${confirmationResult.messageId}`);
            } else {
                console.log('   ‚ùå Erreur envoi confirmation:', confirmationResult.error);
            }
        } catch (emailError) {
            console.log('   ‚ùå Erreur technique confirmation:', emailError.message);
        }
        */
        console.log('   ‚úÖ Email confirmation pr√©par√© (envoi simul√©)');

        console.log('\nüì§ TEST 4: Email rappel identifiants...');

        const identifiantsData = {
            parentFirstName: 'S√©bastien',
            parentLastName: 'Test Parent',
            parentEmail: PARENT_EMAIL,
            loginCredentials: {
                email: PARENT_EMAIL,
                instructions: 'Utilisez votre email et le mot de passe que vous avez choisi lors de l\'inscription'
            }
        };

        console.log(`   üìß Destinataire: ${PARENT_EMAIL}`);
        console.log(`   üîë Email de connexion: ${identifiantsData.loginCredentials.email}`);
        console.log('   üìù Instructions de connexion incluses');
        console.log('   ‚úÖ Email identifiants pr√©par√© (envoi simul√©)');

        console.log('\nüéØ === R√âSUM√â TEST EMAILS ===');
        console.log('===========================');
        console.log('üìä CONFIGURATION:');
        console.log(`   ‚Ä¢ Service SMTP: ${process.env.EMAIL_SERVICE || 'NON CONFIGUR√â'}`);
        console.log(`   ‚Ä¢ Compte exp√©diteur: ${process.env.EMAIL_USER || 'NON CONFIGUR√â'}`);
        console.log(`   ‚Ä¢ Mode test: ${process.env.TEST_MODE || 'false'}`);
        console.log('');
        console.log('üìß EMAILS PR√âPAR√âS:');
        console.log(`   ‚úÖ Admin (${ADMIN_EMAIL}):`);
        console.log('      - Notification nouvelle demande d\'inscription');
        console.log(`   ‚úÖ Parent (${PARENT_EMAIL}):`);
        console.log('      - Confirmation inscription approuv√©e');
        console.log('      - Rappel identifiants de connexion');
        console.log('');
        console.log('üîß POUR ACTIVER L\'ENVOI R√âEL:');
        console.log('   1. V√©rifiez la configuration EMAIL_USER/EMAIL_PASS');
        console.log('   2. D√©commentez les sections d\'envoi dans le code');
        console.log('   3. Relancez le test');
        console.log('===========================');

    } catch (error) {
        console.error('\n‚ùå Erreur durant le test emails:', error.message);
        console.error('Stack:', error.stack);
    }
}

// Test de la configuration seule
async function testConfigurationEmail() {
    console.log('üîß === TEST RAPIDE CONFIGURATION EMAIL ===\n');

    console.log('üìù Variables d\'environnement:');
    console.log(`   EMAIL_USER: ${process.env.EMAIL_USER ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
    console.log(`   EMAIL_PASS: ${process.env.EMAIL_PASS ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
    console.log(`   EMAIL_SERVICE: ${process.env.EMAIL_SERVICE || 'gmail (par d√©faut)'}`);
    console.log(`   TEST_MODE: ${process.env.TEST_MODE || 'false'}`);
    console.log(`   TEST_EMAIL: ${process.env.TEST_EMAIL || 'Non d√©fini'}`);

    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log('\n‚ö†Ô∏è CONFIGURATION INCOMPL√àTE');
        console.log('üí° Ajoutez dans votre fichier .env:');
        console.log('   EMAIL_USER=votre.email@gmail.com');
        console.log('   EMAIL_PASS=votre_mot_de_passe_application');
        console.log('   TEST_MODE=true');
        console.log('   TEST_EMAIL=sgdigitalweb13@gmail.com');
    } else {
        console.log('\n‚úÖ Configuration compl√®te !');

        try {
            console.log('\nüîå Test de connexion...');
            const connectionOk = await emailService.testConnection();

            if (connectionOk) {
                console.log('‚úÖ Connexion SMTP r√©ussie !');
                console.log('üöÄ Pr√™t √† envoyer des emails');
            } else {
                console.log('‚ùå Probl√®me de connexion SMTP');
            }
        } catch (error) {
            console.log('‚ùå Erreur connexion:', error.message);
        }
    }
}

// Choix du test selon l'argument
const args = process.argv.slice(2);
const testType = args[0] || 'full';

if (require.main === module) {
    switch (testType) {
        case 'config':
            testConfigurationEmail();
            break;
        case 'full':
        default:
            testEmailsSpecifiques();
            break;
    }
}

module.exports = { testEmailsSpecifiques, testConfigurationEmail };
