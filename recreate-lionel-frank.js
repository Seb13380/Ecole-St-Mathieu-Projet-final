const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function recreateLionelAndFrank() {
    try {
        console.log('üîê Recr√©ation de Lionel et Frank...');

        // === CR√âATION DE LIONEL (DIRECTION) ===
        console.log('\nüë®‚Äçüíº Cr√©ation de Lionel Camboulives...');
        
        const lionelEmail = 'l.camboulives@stmathieu.org';
        const lionelPassword = await bcrypt.hash('Lionel123!', 10);

        // V√©rifier si Lionel existe d√©j√†
        const existingLionel = await prisma.user.findUnique({
            where: { email: lionelEmail }
        });

        if (existingLionel) {
            console.log('‚ö†Ô∏è  Lionel existe d√©j√†, mise √† jour...');
            await prisma.user.update({
                where: { email: lionelEmail },
                data: {
                    password: lionelPassword,
                    role: 'DIRECTION',
                    firstName: 'Lionel',
                    lastName: 'Camboulives',
                    phone: '06.63.78.69.68',
                    adress: '√âcole Saint-Mathieu'
                }
            });
            console.log('‚úÖ Lionel mis √† jour avec succ√®s !');
        } else {
            const lionel = await prisma.user.create({
                data: {
                    firstName: 'Lionel',
                    lastName: 'Camboulives',
                    email: lionelEmail,
                    password: lionelPassword,
                    phone: '06.63.78.69.68',
                    adress: '√âcole Saint-Mathieu',
                    role: 'DIRECTION'
                }
            });
            console.log('‚úÖ Lionel cr√©√© avec succ√®s !');
        }

        // === CR√âATION DE FRANK (GESTIONNAIRE_SITE) ===
        console.log('\nüîß Cr√©ation de Frank...');
        
        const frankEmail = 'frank.quaracino@orange.fr';
        const frankPassword = await bcrypt.hash('Frank123!', 10);

        // V√©rifier si Frank existe d√©j√†
        const existingFrank = await prisma.user.findUnique({
            where: { email: frankEmail }
        });

        if (existingFrank) {
            console.log('‚ö†Ô∏è  Frank existe d√©j√†, mise √† jour...');
            await prisma.user.update({
                where: { email: frankEmail },
                data: {
                    password: frankPassword,
                    role: 'GESTIONNAIRE_SITE',
                    firstName: 'Frank',
                    lastName: 'Quaracino',
                    phone: '06.12.34.56.79',
                    adress: '√âcole Saint-Mathieu'
                }
            });
            console.log('‚úÖ Frank mis √† jour avec succ√®s !');
        } else {
            const frank = await prisma.user.create({
                data: {
                    firstName: 'Frank',
                    lastName: 'Quaracino',
                    email: frankEmail,
                    password: frankPassword,
                    phone: '06.12.34.56.79',
                    adress: '√âcole Saint-Mathieu',
                    role: 'GESTIONNAIRE_SITE'
                }
            });
            console.log('‚úÖ Frank cr√©√© avec succ√®s !');
        }

        // === R√âCAPITULATIF ===
        console.log('\nüéâ R√âCAPITULATIF DES COMPTES CR√â√âS:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        console.log('\nüë®‚Äçüíº LIONEL CAMBOULIVES (DIRECTION):');
        console.log(`üìß Email: ${lionelEmail}`);
        console.log('üîë Mot de passe: Lionel123!');
        console.log('üì± T√©l√©phone: 06.63.78.69.68');
        console.log('üîí R√¥le: DIRECTION');
        
        console.log('\nüîß FRANK QUARACINO (GESTIONNAIRE SITE):');
        console.log(`üìß Email: ${frankEmail}`);
        console.log('üîë Mot de passe: Frank123!');
        console.log('üì± T√©l√©phone: 06.12.34.56.79');
        console.log('üîí R√¥le: GESTIONNAIRE_SITE');
        
        console.log('\n‚úÖ Tous les comptes sont pr√™ts √† √™tre utilis√©s !');
        console.log('‚ö†Ô∏è  IMPORTANT: Changez ces mots de passe apr√®s la premi√®re connexion !');

        // V√©rification finale
        const finalLionel = await prisma.user.findUnique({
            where: { email: lionelEmail }
        });
        
        const finalFrank = await prisma.user.findUnique({
            where: { email: frankEmail }
        });

        if (finalLionel && finalFrank) {
            console.log('\n‚úÖ V√©rification finale r√©ussie - Tous les comptes sont op√©rationnels !');
        } else {
            console.log('\n‚ùå Probl√®me avec la cr√©ation des comptes');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la recr√©ation des utilisateurs:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ex√©cuter le script
recreateLionelAndFrank()
    .then(() => {
        console.log('\nüéØ Script termin√© avec succ√®s !');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Erreur:', error);
        process.exit(1);
    });
