const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testInscriptionSystem() {
    try {
        console.log('üîç Test du syst√®me de gestion des inscriptions...\n');

        // 1. Test de r√©cup√©ration des configurations
        console.log('1. Test de r√©cup√©ration des configurations:');
        const configs = await prisma.inscriptionConfig.findMany();
        console.log(`   ‚úÖ Configurations trouv√©es: ${configs.length}`);

        // 2. Test de r√©cup√©ration des documents
        console.log('\n2. Test de r√©cup√©ration des documents:');
        const documents = await prisma.inscriptionDocument.findMany();
        console.log(`   ‚úÖ Documents trouv√©s: ${documents.length}`);

        // 3. Test de cr√©ation d'une configuration par d√©faut si n√©cessaire
        console.log('\n3. Test de configuration par d√©faut:');
        let activeConfig = await prisma.inscriptionConfig.findFirst({
            where: { actif: true }
        });

        if (!activeConfig) {
            console.log('   üîß Aucune configuration active trouv√©e, cr√©ation d\'une configuration par d√©faut...');

            // R√©cup√©rer un utilisateur admin pour assigner la configuration
            const adminUser = await prisma.user.findFirst({
                where: {
                    role: { in: ['DIRECTION', 'GESTIONNAIRE_SITE'] }
                }
            });

            if (adminUser) {
                activeConfig = await prisma.inscriptionConfig.create({
                    data: {
                        soustitre: "Demande d'inscription pour l'ann√©e scolaire 2025-2026",
                        actif: true,
                        modifiePar: adminUser.id
                    },
                    include: {
                        modificateur: {
                            select: { firstName: true, lastName: true }
                        }
                    }
                });
                console.log(`   ‚úÖ Configuration cr√©√©e: "${activeConfig.soustitre}"`);
                console.log(`   üë§ Cr√©√©e par: ${activeConfig.modificateur.firstName} ${activeConfig.modificateur.lastName}`);
            } else {
                console.log('   ‚ùå Aucun utilisateur admin trouv√© pour cr√©er la configuration');
            }
        } else {
            console.log(`   ‚úÖ Configuration active trouv√©e: "${activeConfig.soustitre}"`);
        }

        // 4. V√©rification des permissions
        console.log('\n4. Test des permissions:');
        const adminUsers = await prisma.user.findMany({
            where: {
                role: { in: ['DIRECTION', 'GESTIONNAIRE_SITE'] }
            },
            select: { firstName: true, lastName: true, email: true, role: true }
        });

        console.log('   üë• Utilisateurs autoris√©s:');
        adminUsers.forEach(user => {
            console.log(`   - ${user.firstName} ${user.lastName} (${user.role}) - ${user.email}`);
        });

        console.log('\n‚úÖ Tous les tests du syst√®me d\'inscription sont pass√©s !\n');

        // 5. Instructions pour tester
        console.log('üéØ Instructions pour tester le syst√®me:');
        console.log('   1. Connectez-vous avec Lionel ou Frank');
        console.log('   2. Allez sur le tableau de bord directeur');
        console.log('   3. Cliquez sur "üìù Gestion Inscriptions"');
        console.log('   4. Modifiez le sous-titre et ajoutez des documents PDF');
        console.log('   5. V√©rifiez la page publique /inscription-eleve');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testInscriptionSystem();
