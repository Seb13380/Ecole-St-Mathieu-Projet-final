const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * DIAGNOSTIC COMPLET DU SYST√àME D'INSCRIPTION
 * V√©rifie que tout est en place pour le workflow parent ‚Üí enfants
 */

async function diagnosticCompletInscription() {
    console.log('üè• === DIAGNOSTIC COMPLET SYST√àME INSCRIPTION ===');
    console.log('================================================\n');

    const rapport = {
        database: false,
        controllers: false,
        emails: false,
        gestionParents: false,
        gestionEnfants: false,
        organisationScolaire: false,
        workflow: false
    };

    try {
        console.log('üíæ TEST 1: Base de donn√©es et mod√®les...');

        try {
            // Test connexion Prisma
            await prisma.$connect();
            console.log('   ‚úÖ Connexion Prisma OK');

            // V√©rifier tables principales
            const tablesTest = await Promise.all([
                prisma.preInscriptionRequest.count(),
                prisma.user.count(),
                prisma.student.count()
            ]);

            console.log(`   üìä Demandes d'inscription: ${tablesTest[0]}`);
            console.log(`   üìä Utilisateurs: ${tablesTest[1]}`);
            console.log(`   üìä √âl√®ves: ${tablesTest[2]}`);

            rapport.database = true;
            console.log('   ‚úÖ Base de donn√©es op√©rationnelle\n');

        } catch (dbError) {
            console.log('   ‚ùå Erreur base de donn√©es:', dbError.message);
            rapport.database = false;
        }

        console.log('üéõÔ∏è TEST 2: Contr√¥leurs d\'inscription...');

        try {
            const inscriptionController = require('./src/controllers/inscriptionController');

            const methodsRequired = [
                'processRegistration',
                'approveRequest',
                'showAllRequests'
            ];

            const methodsPresent = methodsRequired.filter(method =>
                typeof inscriptionController[method] === 'function'
            );

            console.log(`   üìã M√©thodes trouv√©es: ${methodsPresent.length}/${methodsRequired.length}`);
            methodsPresent.forEach(method => {
                console.log(`      ‚úÖ ${method}`);
            });

            if (methodsPresent.length === methodsRequired.length) {
                rapport.controllers = true;
                console.log('   ‚úÖ Contr√¥leurs complets\n');
            } else {
                console.log('   ‚ö†Ô∏è Certaines m√©thodes manquantes\n');
            }

        } catch (controllerError) {
            console.log('   ‚ùå Erreur contr√¥leurs:', controllerError.message);
            rapport.controllers = false;
        }

        console.log('üìß TEST 3: Service email...');

        try {
            const emailService = require('./src/services/emailService');

            console.log('   üìù Configuration:');
            console.log(`      EMAIL_USER: ${process.env.EMAIL_USER ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
            console.log(`      EMAIL_PASS: ${process.env.EMAIL_PASS ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
            console.log(`      TEST_EMAIL: sgdigitalweb13@gmail.com`);
            console.log(`      PARENT_TEST: sebcecg@gmail.com`);

            if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
                rapport.emails = true;
                console.log('   ‚úÖ Service email configur√©\n');
            } else {
                console.log('   ‚ö†Ô∏è Configuration email incompl√®te\n');
                rapport.emails = false;
            }

        } catch (emailError) {
            console.log('   ‚ùå Erreur service email:', emailError.message);
            rapport.emails = false;
        }

        console.log('üë• TEST 4: Gestion des parents...');

        try {
            const parents = await prisma.user.findMany({
                where: { role: 'PARENT' },
                include: {
                    students: true
                }
            });

            console.log(`   üìä Parents dans le syst√®me: ${parents.length}`);

            if (parents.length > 0) {
                console.log('   üë§ Exemples de parents:');
                parents.slice(0, 3).forEach((parent, index) => {
                    console.log(`      ${index + 1}. ${parent.firstName} ${parent.lastName} (${parent.students.length} enfant(s))`);
                });
            }

            rapport.gestionParents = true;
            console.log('   ‚úÖ Gestion parents op√©rationnelle\n');

        } catch (parentError) {
            console.log('   ‚ùå Erreur gestion parents:', parentError.message);
            rapport.gestionParents = false;
        }

        console.log('üë∂ TEST 5: Gestion des enfants...');

        try {
            const enfants = await prisma.student.findMany({
                include: {
                    parent: {
                        select: { firstName: true, lastName: true, email: true }
                    }
                }
            });

            console.log(`   üìä √âl√®ves dans le syst√®me: ${enfants.length}`);

            const orphelins = enfants.filter(e => !e.parent);
            console.log(`   üìä √âl√®ves sans parent: ${orphelins.length}`);

            if (enfants.length > 0) {
                console.log('   üë∂ Exemples d\'√©l√®ves:');
                enfants.slice(0, 3).forEach((enfant, index) => {
                    const parent = enfant.parent
                        ? `${enfant.parent.firstName} ${enfant.parent.lastName}`
                        : 'Aucun parent';
                    console.log(`      ${index + 1}. ${enfant.firstName} ${enfant.lastName} ‚Üí Parent: ${parent}`);
                });
            }

            rapport.gestionEnfants = true;
            console.log('   ‚úÖ Gestion enfants op√©rationnelle\n');

        } catch (enfantError) {
            console.log('   ‚ùå Erreur gestion enfants:', enfantError.message);
            rapport.gestionEnfants = false;
        }

        console.log('üè´ TEST 6: Organisation scolaire...');

        try {
            // V√©rifier les relations parent-enfant
            const relationsParentEnfant = await prisma.user.findMany({
                where: {
                    role: 'PARENT',
                    students: {
                        some: {}
                    }
                },
                include: {
                    students: {
                        select: {
                            firstName: true,
                            lastName: true,
                            birthDate: true
                        }
                    }
                }
            });

            console.log(`   üìä Parents avec enfants: ${relationsParentEnfant.length}`);

            // Calculer statistiques
            const totalEnfants = relationsParentEnfant.reduce((sum, parent) => sum + parent.students.length, 0);
            console.log(`   üìä Total enfants li√©s: ${totalEnfants}`);

            if (relationsParentEnfant.length > 0) {
                console.log('   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Exemples de familles:');
                relationsParentEnfant.slice(0, 2).forEach((parent, index) => {
                    console.log(`      ${index + 1}. ${parent.firstName} ${parent.lastName}:`);
                    parent.students.forEach((enfant, i) => {
                        const age = Math.floor((new Date() - new Date(enfant.birthDate)) / (365.25 * 24 * 60 * 60 * 1000));
                        console.log(`         - ${enfant.firstName} ${enfant.lastName} (${age} ans)`);
                    });
                });
            }

            rapport.organisationScolaire = true;
            console.log('   ‚úÖ Organisation scolaire op√©rationnelle\n');

        } catch (orgError) {
            console.log('   ‚ùå Erreur organisation scolaire:', orgError.message);
            rapport.organisationScolaire = false;
        }

        console.log('üîÑ TEST 7: Workflow complet...');

        try {
            // V√©rifier une demande d'inscription r√©cente
            const dernieresDemandes = await prisma.preInscriptionRequest.findMany({
                orderBy: { submittedAt: 'desc' },
                take: 3,
                include: {
                    processor: {
                        select: { firstName: true, lastName: true }
                    }
                }
            });

            console.log(`   üìä Demandes r√©centes: ${dernieresDemandes.length}`);

            const stats = {
                pending: dernieresDemandes.filter(d => d.status === 'PENDING').length,
                accepted: dernieresDemandes.filter(d => d.status === 'ACCEPTED').length,
                rejected: dernieresDemandes.filter(d => d.status === 'REJECTED').length
            };

            console.log(`   üìà En attente: ${stats.pending}`);
            console.log(`   üìà Accept√©es: ${stats.accepted}`);
            console.log(`   üìà Refus√©es: ${stats.rejected}`);

            if (dernieresDemandes.length > 0) {
                console.log('   üìã Derni√®res demandes:');
                dernieresDemandes.forEach((demande, index) => {
                    const status = demande.status === 'PENDING' ? '‚è≥' :
                        demande.status === 'ACCEPTED' ? '‚úÖ' :
                            demande.status === 'REJECTED' ? '‚ùå' : '‚ùì';
                    console.log(`      ${index + 1}. ${status} ${demande.parentFirstName} ${demande.parentLastName} (${demande.parentEmail})`);
                });
            }

            rapport.workflow = true;
            console.log('   ‚úÖ Workflow complet op√©rationnel\n');

        } catch (workflowError) {
            console.log('   ‚ùå Erreur workflow:', workflowError.message);
            rapport.workflow = false;
        }

        // R√âSUM√â FINAL
        console.log('üéØ === R√âSUM√â DIAGNOSTIC ===');
        console.log('===========================');

        const totalTests = Object.keys(rapport).length;
        const testsReussis = Object.values(rapport).filter(Boolean).length;
        const pourcentage = Math.round((testsReussis / totalTests) * 100);

        console.log(`üìä Tests r√©ussis: ${testsReussis}/${totalTests} (${pourcentage}%)`);
        console.log('');

        Object.entries(rapport).forEach(([test, status]) => {
            const icon = status ? '‚úÖ' : '‚ùå';
            const label = test.replace(/([A-Z])/g, ' $1').toLowerCase();
            console.log(`   ${icon} ${label}`);
        });

        console.log('');

        if (testsReussis === totalTests) {
            console.log('üéâ === SYST√àME PR√äT ===');
            console.log('‚úÖ Tous les composants fonctionnent !');
            console.log('');
            console.log('üöÄ WORKFLOW INSCRIPTION VALID√â:');
            console.log('   1. ‚úÖ Parent fait demande ‚Üí Base de donn√©es');
            console.log('   2. ‚úÖ Notification admin ‚Üí sgdigitalweb13@gmail.com');
            console.log('   3. ‚úÖ Admin approuve ‚Üí Compte parent cr√©√©');
            console.log('   4. ‚úÖ Enfants cr√©√©s ‚Üí Gestion enfants');
            console.log('   5. ‚úÖ Relations √©tablies ‚Üí Organisation scolaire');
            console.log('   6. ‚úÖ Email confirmation ‚Üí sebcecg@gmail.com');
            console.log('');
            console.log('üë• GESTION OP√âRATIONNELLE:');
            console.log('   ‚úÖ Gestion Parents accessible');
            console.log('   ‚úÖ Gestion Enfants accessible');
            console.log('   ‚úÖ Organisation Scolaire accessible');

        } else {
            console.log('‚ö†Ô∏è === ATTENTION ===');
            console.log('Certains composants n√©cessitent une v√©rification');
            console.log('');

            const failed = Object.entries(rapport)
                .filter(([_, status]) => !status)
                .map(([test, _]) => test);

            if (failed.length > 0) {
                console.log('‚ùå PROBL√àMES D√âTECT√âS:');
                failed.forEach(test => {
                    console.log(`   - ${test.replace(/([A-Z])/g, ' $1').toLowerCase()}`);
                });
            }
        }

        console.log('===========================');

    } catch (error) {
        console.error('\n‚ùå Erreur diagnostic:', error.message);
    } finally {
        await prisma.$disconnect();
    }
}

// Lancer le diagnostic
if (require.main === module) {
    diagnosticCompletInscription();
}

module.exports = diagnosticCompletInscription;
