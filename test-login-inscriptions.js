const axios = require('axios');

// Configuration d'axios avec gestion des cookies
const axiosInstance = axios.create({
    baseURL: 'http://localhost:3007',
    maxRedirects: 5,
    withCredentials: true,
    headers: {
        'User-Agent': 'Test-Script',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
    }
});

async function testCompleteWorkflow() {
    try {
        console.log('üîÑ Test complet du workflow directeur...\n');

        // 1. Aller √† la page de login
        console.log('1Ô∏è‚É£ Acc√®s √† la page de login...');
        const loginPage = await axiosInstance.get('/auth/login');
        console.log('   ‚úÖ Page login accessible (Status:', loginPage.status, ')');

        // 2. Se connecter (il faut d'abord v√©rifier les comptes disponibles)
        console.log('\n2Ô∏è‚É£ Tentative de connexion...');

        // Essayons avec le compte lionel (directeur)
        try {
            const loginResponse = await axiosInstance.post('/auth/login', {
                email: 'lionel@stmathieu.com',
                password: 'lionel123'
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                transformRequest: [(data) => {
                    return Object.keys(data)
                        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)
                        .join('&');
                }]
            });

            console.log('   ‚úÖ Connexion r√©ussie (Status:', loginResponse.status, ')');

            if (loginResponse.headers.location) {
                console.log('   üîÑ Redirection vers:', loginResponse.headers.location);
            }

        } catch (loginError) {
            if (loginError.response && loginError.response.status === 302) {
                console.log('   ‚úÖ Connexion r√©ussie (redirection 302)');
                if (loginError.response.headers.location) {
                    console.log('   üîÑ Redirection vers:', loginError.response.headers.location);
                }
            } else {
                console.log('   ‚ùå Erreur de connexion:', loginError.response?.status, loginError.response?.data || loginError.message);
                return;
            }
        }

        // 3. Tester l'acc√®s au dashboard directeur
        console.log('\n3Ô∏è‚É£ Acc√®s au dashboard directeur...');
        try {
            const dashboardResponse = await axiosInstance.get('/directeur/dashboard');
            console.log('   ‚úÖ Dashboard accessible (Status:', dashboardResponse.status, ')');

            if (dashboardResponse.data.includes('Demandes Inscription')) {
                console.log('   ‚úÖ Carte "Demandes Inscription" pr√©sente');
            } else {
                console.log('   ‚ùå Carte "Demandes Inscription" absente');
            }

        } catch (dashError) {
            console.log('   ‚ùå Erreur dashboard:', dashError.response?.status, dashError.message);
        }

        // 4. Tester l'acc√®s aux inscriptions
        console.log('\n4Ô∏è‚É£ Acc√®s aux demandes d\'inscription...');
        try {
            const inscriptionsResponse = await axiosInstance.get('/directeur/inscriptions');
            console.log('   ‚úÖ Page inscriptions accessible (Status:', inscriptionsResponse.status, ')');
            console.log('   üìÑ Taille r√©ponse:', inscriptionsResponse.data.length, 'caract√®res');

            if (inscriptionsResponse.data.includes('<!DOCTYPE html>')) {
                console.log('   ‚úÖ HTML valide re√ßu');

                if (inscriptionsResponse.data.includes('Demandes d\'inscription') ||
                    inscriptionsResponse.data.includes('inscription-requests')) {
                    console.log('   ‚úÖ Contenu des inscriptions d√©tect√©');
                } else {
                    console.log('   ‚ùå Contenu des inscriptions manquant');
                    console.log('   üìã D√©but de la r√©ponse:', inscriptionsResponse.data.substring(0, 500));
                }
            } else {
                console.log('   ‚ùå Pas de HTML valide');
                console.log('   üìã R√©ponse:', inscriptionsResponse.data);
            }

        } catch (inscError) {
            console.log('   ‚ùå Erreur inscriptions:', inscError.response?.status, inscError.message);
            if (inscError.response?.data) {
                console.log('   üìã Donn√©es erreur:', inscError.response.data.substring(0, 500));
            }
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
    }
}

testCompleteWorkflow();
