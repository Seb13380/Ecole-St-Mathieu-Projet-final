// Gestion des actualit√©s - Interface d'administration
console.log('üöÄ Script actualites-admin.js charg√©');

// Fonctions utilitaires pour les modales d'erreur et de succ√®s
window.showError = function (message) {
    try {
        document.getElementById('errorMessage').textContent = message;
        document.getElementById('errorModal').classList.remove('hidden');
        console.log('‚ùå Modal d\'erreur affich√©e:', message);
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'affichage du modal d\'erreur:', error);
        // Fallback vers alert si les modales ne fonctionnent pas
        alert('Erreur: ' + message);
    }
};

window.showSuccess = function (message) {
    try {
        document.getElementById('successMessage').textContent = message;
        document.getElementById('successModal').classList.remove('hidden');
        console.log('‚úÖ Modal de succ√®s affich√©:', message);
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'affichage du modal de succ√®s:', error);
        // Fallback vers alert si les modales ne fonctionnent pas
        alert('Succ√®s: ' + message);
    }
};

window.closeErrorModal = function () {
    try {
        document.getElementById('errorModal').classList.add('hidden');
        console.log('üîí Modal d\'erreur ferm√©');
    } catch (error) {
        console.error('‚ùå Erreur lors de la fermeture du modal d\'erreur:', error);
    }
};

window.closeSuccessModal = function () {
    try {
        document.getElementById('successModal').classList.add('hidden');
        console.log('üîí Modal de succ√®s ferm√©');
    } catch (error) {
        console.error('‚ùå Erreur lors de la fermeture du modal de succ√®s:', error);
    }
};

// Fonction de modification d'actualit√©
window.editActualite = function (id, titre, contenu, important, visible) {
    console.log('üîß Fonction editActualite appel√©e:', {
        id: id,
        titre: titre,
        contenu: contenu,
        important: important,
        visible: visible
    });

    // V√©rification des param√®tres
    if (!id) {
        console.error('‚ùå ID manquant pour editActualite');
        showError('Impossible de modifier cette actualit√© : identifiant manquant.');
        return;
    }

    try {
        // S√©curiser les valeurs
        const safeId = parseInt(id) || 0;
        const safeTitre = String(titre || '');
        const safeContenu = String(contenu || '');
        const safeImportant = (important === true || important === 'true' || important === 1);
        const safeVisible = (visible === true || visible === 'true' || visible === 1);

        console.log('üîÑ Valeurs s√©curis√©es:', {
            safeId, safeTitre, safeContenu, safeImportant, safeVisible
        });

        // Remplir le formulaire
        document.getElementById('editTitre').value = safeTitre;
        document.getElementById('editContenu').value = safeContenu;
        document.getElementById('editImportant').checked = safeImportant;
        document.getElementById('editVisible').checked = safeVisible;
        document.getElementById('editForm').action = `/actualites/${safeId}`;

        // Ouvrir le modal
        document.getElementById('editModal').classList.remove('hidden');
        console.log('‚úÖ Modal d\'√©dition ouverte avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ouverture du modal d\'√©dition:', error);
        showError('Une erreur s\'est produite lors de l\'ouverture du formulaire de modification. Veuillez r√©essayer.');
    }
};

// Fonction de fermeture du modal d'√©dition
window.closeEditModal = function () {
    try {
        document.getElementById('editModal').classList.add('hidden');
        console.log('üîí Modal d\'√©dition ferm√©e');
    } catch (error) {
        console.error('‚ùå Erreur lors de la fermeture du modal:', error);
    }
};

// Fonction de confirmation de suppression
window.confirmDelete = function (actualiteId, actualiteTitle) {
    console.log('üóëÔ∏è Fonction confirmDelete appel√©e:', {
        actualiteId: actualiteId,
        actualiteTitle: actualiteTitle
    });

    // V√©rification des param√®tres
    if (!actualiteId) {
        console.error('‚ùå ID manquant pour confirmDelete');
        showError('Impossible de supprimer cette actualit√© : identifiant manquant.');
        return;
    }

    try {
        // S√©curiser les valeurs
        const safeId = parseInt(actualiteId) || 0;
        const safeTitle = String(actualiteTitle || 'cette actualit√©');

        console.log('üîÑ Valeurs s√©curis√©es:', { safeId, safeTitle });

        // Remplir le modal de confirmation
        document.getElementById('actualiteTitle').textContent = safeTitle;
        document.getElementById('deleteForm').action = `/actualites/${safeId}/delete`;

        // Ouvrir le modal
        document.getElementById('deleteModal').classList.remove('hidden');
        console.log('‚úÖ Modal de suppression ouvert avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ouverture du modal de suppression:', error);
        showError('Une erreur s\'est produite lors de l\'ouverture du formulaire de suppression. Veuillez r√©essayer.');
    }
};

// Fonction de fermeture du modal de suppression
window.closeDeleteModal = function () {
    try {
        document.getElementById('deleteModal').classList.add('hidden');
        console.log('üîí Modal de suppression ferm√©');
    } catch (error) {
        console.error('‚ùå Erreur lors de la fermeture du modal:', error);
    }
};

// Initialisation une fois le DOM charg√©
document.addEventListener('DOMContentLoaded', function () {
    console.log('üìã Initialisation des gestionnaires d\'√©v√©nements...');

    try {
        // Fermer les modals en cliquant √† l'ext√©rieur
        const editModal = document.getElementById('editModal');
        const deleteModal = document.getElementById('deleteModal');
        const errorModal = document.getElementById('errorModal');
        const successModal = document.getElementById('successModal');

        if (editModal) {
            editModal.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeEditModal();
                }
            });
            console.log('‚úÖ Gestionnaire de clic pour editModal ajout√©');
        } else {
            console.warn('‚ö†Ô∏è Element editModal non trouv√©');
        }

        if (deleteModal) {
            deleteModal.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeDeleteModal();
                }
            });
            console.log('‚úÖ Gestionnaire de clic pour deleteModal ajout√©');
        } else {
            console.warn('‚ö†Ô∏è Element deleteModal non trouv√©');
        }

        if (errorModal) {
            errorModal.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeErrorModal();
                }
            });
            console.log('‚úÖ Gestionnaire de clic pour errorModal ajout√©');
        } else {
            console.warn('‚ö†Ô∏è Element errorModal non trouv√©');
        }

        if (successModal) {
            successModal.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeSuccessModal();
                }
            });
            console.log('‚úÖ Gestionnaire de clic pour successModal ajout√©');
        } else {
            console.warn('‚ö†Ô∏è Element successModal non trouv√©');
        }

        // Auto-remplir la date avec aujourd'hui
        const dateField = document.getElementById('datePublication');
        if (dateField) {
            const today = new Date().toISOString().split('T')[0];
            dateField.value = today;
            console.log('üìÖ Date du jour d√©finie:', today);
        }

        // Test de pr√©sence des √©l√©ments
        console.log('üß™ Tests des √©l√©ments DOM:');
        console.log('editModal:', editModal ? '‚úÖ' : '‚ùå');
        console.log('deleteModal:', deleteModal ? '‚úÖ' : '‚ùå');
        console.log('errorModal:', errorModal ? '‚úÖ' : '‚ùå');
        console.log('successModal:', successModal ? '‚úÖ' : '‚ùå');
        console.log('editForm:', document.getElementById('editForm') ? '‚úÖ' : '‚ùå');
        console.log('deleteForm:', document.getElementById('deleteForm') ? '‚úÖ' : '‚ùå');

        console.log('‚úÖ Initialisation termin√©e avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error);
    }
});

// Test des fonctions disponibles
console.log('üß™ Fonctions disponibles:', {
    editActualite: typeof window.editActualite,
    confirmDelete: typeof window.confirmDelete,
    closeEditModal: typeof window.closeEditModal,
    closeDeleteModal: typeof window.closeDeleteModal,
    showError: typeof window.showError,
    showSuccess: typeof window.showSuccess,
    closeErrorModal: typeof window.closeErrorModal,
    closeSuccessModal: typeof window.closeSuccessModal
});
